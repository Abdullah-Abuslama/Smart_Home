
Grad_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000406a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000166  00800060  0000406a  000040fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001c6  008001c6  00004264  2**0
                  ALLOC
  3 .stab         000042c0  00000000  00000000  00004264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ab  00000000  00000000  00008524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a07f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e51b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_1>
       8:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_2>
       c:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_6>
      1c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_7>
      20:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_8>
      24:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__vector_9>
      28:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_10>
      2c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 18 	call	0x312c	; 0x312c <main>
      8a:	0c 94 33 20 	jmp	0x4066	; 0x4066 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidINIT>:
#include "USART_interface.h"

 #define NO_PRESSED_KEY    0xff

void USART_voidINIT(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRCValue = 0 ;
     b50:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(Local_u8UCSRCValue,UCSRC_URSEL);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = Local_u8UCSRCValue ;
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	80 83       	st	Z, r24

	UBRRL = 51 ;
     b72:	e9 e2       	ldi	r30, 0x29	; 41
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	83 e3       	ldi	r24, 0x33	; 51
     b78:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_RXEN);
     b7a:	aa e2       	ldi	r26, 0x2A	; 42
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ea e2       	ldi	r30, 0x2A	; 42
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 61       	ori	r24, 0x10	; 16
     b86:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
     b88:	aa e2       	ldi	r26, 0x2A	; 42
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	88 60       	ori	r24, 0x08	; 8
     b94:	8c 93       	st	X, r24
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <USART_voidSendSynhronous>:
void USART_voidSendSynhronous(u8 Copy_u8Data)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <USART_voidSendSynhronous+0x6>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(UCSRA,UCSRA_UDRE) == 0));
     baa:	eb e2       	ldi	r30, 0x2B	; 43
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
	UDR = Copy_u8Data ;
     bb0:	ec e2       	ldi	r30, 0x2C	; 44
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	80 83       	st	Z, r24
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <USART_u8ReceiveSynhronous>:
u8 USART_u8ReceiveSynhronous(void)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0f 92       	push	r0
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(UCSRA,UCSRA_RXC) == 0));
     bcc:	eb e2       	ldi	r30, 0x2B	; 43
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
	return UDR ;
     bd2:	ec e2       	ldi	r30, 0x2C	; 44
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <USART_u8IsDataAvailable>:
 

// Added Recently

u8 USART_u8IsDataAvailable(void) {
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
    return (UCSRA & (1 << UCSRA_RXC));  // Check if RXC bit is set, indicating data is available
     be8:	eb e2       	ldi	r30, 0x2B	; 43
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 78       	andi	r24, 0x80	; 128
}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <USART_u8ReceiveNonBlocking>:

u8 USART_u8ReceiveNonBlocking(void) {
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
    if (USART_u8IsDataAvailable()) {
     c00:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <USART_u8IsDataAvailable>
     c04:	88 23       	and	r24, r24
     c06:	29 f0       	breq	.+10     	; 0xc12 <USART_u8ReceiveNonBlocking+0x1c>
        return UDR;  // Read data from the USART Data Register (UDR)
     c08:	ec e2       	ldi	r30, 0x2C	; 44
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <USART_u8ReceiveNonBlocking+0x20>
    }
    return NO_PRESSED_KEY;  // Return a special value indicating no data available
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	89 81       	ldd	r24, Y+1	; 0x01
}
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
     c28:	af e4       	ldi	r26, 0x4F	; 79
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ef e4       	ldi	r30, 0x4F	; 79
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
     c36:	af e4       	ldi	r26, 0x4F	; 79
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ef e4       	ldi	r30, 0x4F	; 79
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
     c44:	ae e4       	ldi	r26, 0x4E	; 78
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ee e4       	ldi	r30, 0x4E	; 78
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 60       	ori	r24, 0x08	; 8
     c50:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
     c52:	ae e4       	ldi	r26, 0x4E	; 78
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ee e4       	ldi	r30, 0x4E	; 78
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
     c60:	af e4       	ldi	r26, 0x4F	; 79
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ef e4       	ldi	r30, 0x4F	; 79
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8f 7b       	andi	r24, 0xBF	; 191
     c6c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
     c6e:	af e4       	ldi	r26, 0x4F	; 79
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ef e4       	ldi	r30, 0x4F	; 79
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	80 68       	ori	r24, 0x80	; 128
     c7a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
     c7c:	af e4       	ldi	r26, 0x4F	; 79
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ef e4       	ldi	r30, 0x4F	; 79
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8f 7e       	andi	r24, 0xEF	; 239
     c88:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
     c8a:	af e4       	ldi	r26, 0x4F	; 79
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	ef e4       	ldi	r30, 0x4F	; 79
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	80 62       	ori	r24, 0x20	; 32
     c96:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
     c98:	ae e4       	ldi	r26, 0x4E	; 78
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ee e4       	ldi	r30, 0x4E	; 78
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 7f       	andi	r24, 0xF8	; 248
     ca4:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
     ca6:	a9 e5       	ldi	r26, 0x59	; 89
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 e5       	ldi	r30, 0x59	; 89
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8b 7f       	andi	r24, 0xFB	; 251
     cb2:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
     cb4:	a9 e5       	ldi	r26, 0x59	; 89
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e9 e5       	ldi	r30, 0x59	; 89
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	87 7f       	andi	r24, 0xF7	; 247
     cc0:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
     cc2:	a9 e5       	ldi	r26, 0x59	; 89
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e9 e5       	ldi	r30, 0x59	; 89
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
     cd0:	a9 e5       	ldi	r26, 0x59	; 89
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e9 e5       	ldi	r30, 0x59	; 89
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
     cde:	a8 e5       	ldi	r26, 0x58	; 88
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 e5       	ldi	r30, 0x58	; 88
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
     cec:	a8 e5       	ldi	r26, 0x58	; 88
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e8 e5       	ldi	r30, 0x58	; 88
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
     cfa:	a8 e5       	ldi	r26, 0x58	; 88
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e8 e5       	ldi	r30, 0x58	; 88
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
     d08:	a8 e5       	ldi	r26, 0x58	; 88
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e8 e5       	ldi	r30, 0x58	; 88
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
     d16:	ea e4       	ldi	r30, 0x4A	; 74
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	10 82       	st	Z, r1
  OCR1AH = 0 ;
     d1c:	eb e4       	ldi	r30, 0x4B	; 75
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	10 82       	st	Z, r1
  OCR1BL = 0 ;
     d22:	e8 e4       	ldi	r30, 0x48	; 72
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
  OCR1BH = 0 ;
     d28:	e9 e4       	ldi	r30, 0x49	; 73
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1
  TCNT1L = 0 ;
     d2e:	ec e4       	ldi	r30, 0x4C	; 76
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1
  TCNT1H = 0 ;
     d34:	ed e4       	ldi	r30, 0x4D	; 77
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	10 82       	st	Z, r1
  ICR1L  = 0 ;
     d3a:	e6 e4       	ldi	r30, 0x46	; 70
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	10 82       	st	Z, r1
  ICR1H  = 0 ;
     d40:	e7 e4       	ldi	r30, 0x47	; 71
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
  
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
     d58:	ae e4       	ldi	r26, 0x4E	; 78
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ee e4       	ldi	r30, 0x4E	; 78
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 7f       	andi	r24, 0xF8	; 248
     d64:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
     d66:	ae e4       	ldi	r26, 0x4E	; 78
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ee e4       	ldi	r30, 0x4E	; 78
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	98 2f       	mov	r25, r24
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	87 70       	andi	r24, 0x07	; 7
     d76:	89 2b       	or	r24, r25
     d78:	8c 93       	st	X, r24
	
}
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
     d8a:	ae e4       	ldi	r26, 0x4E	; 78
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ee e4       	ldi	r30, 0x4E	; 78
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 7f       	andi	r24, 0xF8	; 248
     d96:	8c 93       	st	X, r24
	
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
     da6:	a9 e5       	ldi	r26, 0x59	; 89
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e9 e5       	ldi	r30, 0x59	; 89
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	84 60       	ori	r24, 0x04	; 4
     db2:	8c 93       	st	X, r24
	
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
     dc2:	a9 e5       	ldi	r26, 0x59	; 89
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e9 e5       	ldi	r30, 0x59	; 89
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	8c 93       	st	X, r24
	
}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
     dde:	a9 e5       	ldi	r26, 0x59	; 89
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e9 e5       	ldi	r30, 0x59	; 89
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 61       	ori	r24, 0x10	; 16
     dea:	8c 93       	st	X, r24
	
}
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
     dfa:	a9 e5       	ldi	r26, 0x59	; 89
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e9 e5       	ldi	r30, 0x59	; 89
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7e       	andi	r24, 0xEF	; 239
     e06:	8c 93       	st	X, r24
	
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
     e16:	a9 e5       	ldi	r26, 0x59	; 89
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e9 e5       	ldi	r30, 0x59	; 89
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	8c 93       	st	X, r24
	
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
     e32:	a9 e5       	ldi	r26, 0x59	; 89
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e9 e5       	ldi	r30, 0x59	; 89
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	87 7f       	andi	r24, 0xF7	; 247
     e3e:	8c 93       	st	X, r24
	
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
     e4e:	a9 e5       	ldi	r26, 0x59	; 89
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e9 e5       	ldi	r30, 0x59	; 89
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	8c 93       	st	X, r24
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
     e6a:	a9 e5       	ldi	r26, 0x59	; 89
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e9 e5       	ldi	r30, 0x59	; 89
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7d       	andi	r24, 0xDF	; 223
     e76:	8c 93       	st	X, r24
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <TIM1_voidSetCallbackOvfInt+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	90 93 d3 01 	sts	0x01D3, r25
     e94:	80 93 d2 01 	sts	0x01D2, r24
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <TIM1_voidSetCallbackCompAInt+0x6>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	90 93 d5 01 	sts	0x01D5, r25
     eb8:	80 93 d4 01 	sts	0x01D4, r24
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <TIM1_voidSetCallbackCompBInt+0x6>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	90 93 cf 01 	sts	0x01CF, r25
     edc:	80 93 ce 01 	sts	0x01CE, r24
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <TIM1_voidSetCallbackIcuInt+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	90 93 d1 01 	sts	0x01D1, r25
     f00:	80 93 d0 01 	sts	0x01D0, r24
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <TIM1_voidSetTimerValue+0x6>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
     f1c:	ec e4       	ldi	r30, 0x4C	; 76
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
     f24:	ed e4       	ldi	r30, 0x4D	; 77
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	89 2f       	mov	r24, r25
     f2e:	99 27       	eor	r25, r25
     f30:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <TIM1_voidSetCmpARegValue+0x6>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
     f4a:	ea e4       	ldi	r30, 0x4A	; 74
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
     f52:	eb e4       	ldi	r30, 0x4B	; 75
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	89 2f       	mov	r24, r25
     f5c:	99 27       	eor	r25, r25
     f5e:	80 83       	st	Z, r24
	
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <TIM1_voidSetCmpBRegValue+0x6>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
     f78:	e8 e4       	ldi	r30, 0x48	; 72
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
     f80:	e9 e4       	ldi	r30, 0x49	; 73
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	89 2f       	mov	r24, r25
     f8a:	99 27       	eor	r25, r25
     f8c:	80 83       	st	Z, r24
	
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <TIM1_voidSetIcuRegValue+0x6>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
     fa6:	e6 e4       	ldi	r30, 0x46	; 70
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24

}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <TIM1_u8ReadTimerValue+0x6>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
     fc6:	ed e4       	ldi	r30, 0x4D	; 77
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	98 2f       	mov	r25, r24
     fda:	88 27       	eor	r24, r24
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
     fe0:	ec e4       	ldi	r30, 0x4C	; 76
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	82 2b       	or	r24, r18
     ff0:	93 2b       	or	r25, r19
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    1004:	1f 92       	push	r1
    1006:	0f 92       	push	r0
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	0f 92       	push	r0
    100c:	11 24       	eor	r1, r1
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    102e:	e0 91 d2 01 	lds	r30, 0x01D2
    1032:	f0 91 d3 01 	lds	r31, 0x01D3
    1036:	09 95       	icall
	
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    1088:	e0 91 d4 01 	lds	r30, 0x01D4
    108c:	f0 91 d5 01 	lds	r31, 0x01D5
    1090:	09 95       	icall
}
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    10e2:	e0 91 ce 01 	lds	r30, 0x01CE
    10e6:	f0 91 cf 01 	lds	r31, 0x01CF
    10ea:	09 95       	icall
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    113c:	e0 91 d0 01 	lds	r30, 0x01D0
    1140:	f0 91 d1 01 	lds	r31, 0x01D1
    1144:	09 95       	icall
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1174:	e6 e4       	ldi	r30, 0x46	; 70
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    118a:	ae e4       	ldi	r26, 0x4E	; 78
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ee e4       	ldi	r30, 0x4E	; 78
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 64       	ori	r24, 0x40	; 64
    1196:	8c 93       	st	X, r24
 }
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    11a6:	ae e4       	ldi	r26, 0x4E	; 78
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ee e4       	ldi	r30, 0x4E	; 78
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7b       	andi	r24, 0xBF	; 191
    11b2:	8c 93       	st	X, r24
 }
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <Timer0_voidInit>:
#include "TIMER_interface.h"

static void (*TIMER0_pvCallBackFunc) (void) = NULL ;

void Timer0_voidInit(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM01);
#elif  TIMO_MODE == TIM0_CTC
	CLR_BIT(TCCR0,TCCR0_WGM00);
	SET_BIT(TCCR0,TCCR0_WGM01);
#elif  TIMO_MODE == TIM0_FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM00);
    11c2:	a3 e5       	ldi	r26, 0x53	; 83
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e3 e5       	ldi	r30, 0x53	; 83
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    11d0:	a3 e5       	ldi	r26, 0x53	; 83
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e3 e5       	ldi	r30, 0x53	; 83
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	8c 93       	st	X, r24
#endif

	/* Choose Compare Match Output Mode */

#if TIMO_WAVE == TIM0_TOGL_OC0
	SET_BIT(TCCR0,TCCR0_COM00);
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
    11ec:	a3 e5       	ldi	r26, 0x53	; 83
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e3 e5       	ldi	r30, 0x53	; 83
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 7d       	andi	r24, 0xDF	; 223
    11f8:	8c 93       	st	X, r24
*/
	/* Prescaler Division by prescaler init
	TCCR0=TCCR0&Prescaler_Mask;
	TCCR0=TCCR0|PRESCALER_init;
	*/
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <Timer0_u8SetCallBack>:

u8 Timer0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <Timer0_u8SetCallBack+0x6>
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9b 83       	std	Y+3, r25	; 0x03
    120e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    1210:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	39 f0       	breq	.+14     	; 0x1228 <Timer0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc ;
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	90 93 c7 01 	sts	0x01C7, r25
    1222:	80 93 c6 01 	sts	0x01C6, r24
    1226:	02 c0       	rjmp	.+4      	; 0x122c <Timer0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER ;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus ;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Timer0_voidSetCompMatchValue>:

void Timer0_voidSetCompMatchValue(u8 Copy_u8CompMatchValue )
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	0f 92       	push	r0
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompMatchValue ;
    1246:	ec e5       	ldi	r30, 0x5C	; 92
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	80 83       	st	Z, r24
}
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <Timer0_voidInterruptEnable>:

void Timer0_voidInterruptEnable(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_OCIE0);

#elif TIMO_MODE == TIM0_NORMAL
	SET_BIT(TIMSK,TIMSK_TOIE0);
#endif
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <Timer0_voidSetPrescalerValue>:

void Timer0_voidSetPrescalerValue(u8 Copy_u8PrescalerValue)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
	/* Set Prescaler Division by User */
		TCCR0=TCCR0&Prescaler_Mask;
    1270:	a3 e5       	ldi	r26, 0x53	; 83
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e3 e5       	ldi	r30, 0x53	; 83
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	88 7f       	andi	r24, 0xF8	; 248
    127c:	8c 93       	st	X, r24
		TCCR0=TCCR0|Copy_u8PrescalerValue;
    127e:	a3 e5       	ldi	r26, 0x53	; 83
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e3 e5       	ldi	r30, 0x53	; 83
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	90 81       	ld	r25, Z
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	89 2b       	or	r24, r25
    128c:	8c 93       	st	X, r24
}
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <Timer0void_ModifyPreloadValue>:

void Timer0void_ModifyPreloadValue( u8 Copy_u8PreloadValue )
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreloadValue ;
    12a2:	e2 e5       	ldi	r30, 0x52	; 82
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	80 83       	st	Z, r24
}
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    12dc:	80 91 c6 01 	lds	r24, 0x01C6
    12e0:	90 91 c7 01 	lds	r25, 0x01C7
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    12e8:	e0 91 c6 01 	lds	r30, 0x01C6
    12ec:	f0 91 c7 01 	lds	r31, 0x01C7
    12f0:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <__vector_11>:


/* For Over Flow */
void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    1342:	80 91 c6 01 	lds	r24, 0x01C6
    1346:	90 91 c7 01 	lds	r25, 0x01C7
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	29 f0       	breq	.+10     	; 0x1358 <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc();
    134e:	e0 91 c6 01 	lds	r30, 0x01C6
    1352:	f0 91 c7 01 	lds	r31, 0x01C7
    1356:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1386:	af e5       	ldi	r26, 0x5F	; 95
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ef e5       	ldi	r30, 0x5F	; 95
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8c 93       	st	X, r24
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    13a2:	af e5       	ldi	r26, 0x5F	; 95
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ef e5       	ldi	r30, 0x5F	; 95
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	8c 93       	st	X, r24
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <EXTIvoid_Enable>:
static void (*PTRtoFUNC_INT_0) (void) = NULL ;
static void (*PTRtoFUNC_INT_1) (void) = NULL ;
static void (*PTRtoFUNC_INT_2) (void) = NULL ;

 void EXTIvoid_Enable(u8 Copy_u8EXTINum,u8 Copy_u8SenseControl)
 {
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2a 97       	sbiw	r28, 0x0a	; 10
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	6a 83       	std	Y+2, r22	; 0x02
	 switch(Copy_u8EXTINum)
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3a 87       	std	Y+10, r19	; 0x0a
    13d6:	29 87       	std	Y+9, r18	; 0x09
    13d8:	89 85       	ldd	r24, Y+9	; 0x09
    13da:	9a 85       	ldd	r25, Y+10	; 0x0a
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <EXTIvoid_Enable+0x2e>
    13e2:	6d c0       	rjmp	.+218    	; 0x14be <EXTIvoid_Enable+0x108>
    13e4:	29 85       	ldd	r18, Y+9	; 0x09
    13e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <EXTIvoid_Enable+0x3a>
    13ee:	c9 c0       	rjmp	.+402    	; 0x1582 <EXTIvoid_Enable+0x1cc>
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	09 f0       	breq	.+2      	; 0x13fa <EXTIvoid_Enable+0x44>
    13f8:	e9 c0       	rjmp	.+466    	; 0x15cc <EXTIvoid_Enable+0x216>
	 {
	 	 case	0 : SET_BIT(GICR,GICR_INT0) ;
    13fa:	ab e5       	ldi	r26, 0x5B	; 91
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	eb e5       	ldi	r30, 0x5B	; 91
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	8c 93       	st	X, r24
	 	 	 	 	switch(Copy_u8SenseControl)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	38 87       	std	Y+8, r19	; 0x08
    1410:	2f 83       	std	Y+7, r18	; 0x07
    1412:	8f 81       	ldd	r24, Y+7	; 0x07
    1414:	98 85       	ldd	r25, Y+8	; 0x08
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	21 f1       	breq	.+72     	; 0x1464 <EXTIvoid_Enable+0xae>
    141c:	2f 81       	ldd	r18, Y+7	; 0x07
    141e:	38 85       	ldd	r19, Y+8	; 0x08
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <EXTIvoid_Enable+0x7a>
    1426:	8f 81       	ldd	r24, Y+7	; 0x07
    1428:	98 85       	ldd	r25, Y+8	; 0x08
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	61 f0       	breq	.+24     	; 0x1446 <EXTIvoid_Enable+0x90>
    142e:	ce c0       	rjmp	.+412    	; 0x15cc <EXTIvoid_Enable+0x216>
    1430:	2f 81       	ldd	r18, Y+7	; 0x07
    1432:	38 85       	ldd	r19, Y+8	; 0x08
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	21 f1       	breq	.+72     	; 0x1482 <EXTIvoid_Enable+0xcc>
    143a:	8f 81       	ldd	r24, Y+7	; 0x07
    143c:	98 85       	ldd	r25, Y+8	; 0x08
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	71 f1       	breq	.+92     	; 0x14a0 <EXTIvoid_Enable+0xea>
    1444:	c3 c0       	rjmp	.+390    	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 	 	 	{
	 	 	 	 	case 0 : CLR_BIT(MCUCR,MCUCR_ISC00);
    1446:	a5 e5       	ldi	r26, 0x55	; 85
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e5       	ldi	r30, 0x55	; 85
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8e 7f       	andi	r24, 0xFE	; 254
    1452:	8c 93       	st	X, r24
	 	 	 	 			 CLR_BIT(MCUCR,MCUCR_ISC01);
    1454:	a5 e5       	ldi	r26, 0x55	; 85
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e5 e5       	ldi	r30, 0x55	; 85
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8d 7f       	andi	r24, 0xFD	; 253
    1460:	8c 93       	st	X, r24
    1462:	b4 c0       	rjmp	.+360    	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 	 	 			 break ;
	 	 	 	 	case 1 : SET_BIT(MCUCR,MCUCR_ISC00);
    1464:	a5 e5       	ldi	r26, 0x55	; 85
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e5       	ldi	r30, 0x55	; 85
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	8c 93       	st	X, r24
	 	 	 	 	 	 	 CLR_BIT(MCUCR,MCUCR_ISC01);
    1472:	a5 e5       	ldi	r26, 0x55	; 85
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e5       	ldi	r30, 0x55	; 85
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8d 7f       	andi	r24, 0xFD	; 253
    147e:	8c 93       	st	X, r24
    1480:	a5 c0       	rjmp	.+330    	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 	 	 	 	 	  break ;
	 	 	 	    case 2 : CLR_BIT(MCUCR,MCUCR_ISC00);
    1482:	a5 e5       	ldi	r26, 0x55	; 85
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e5       	ldi	r30, 0x55	; 85
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8e 7f       	andi	r24, 0xFE	; 254
    148e:	8c 93       	st	X, r24
	 	 	 	 	 	 	 SET_BIT(MCUCR,MCUCR_ISC01);
    1490:	a5 e5       	ldi	r26, 0x55	; 85
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e5 e5       	ldi	r30, 0x55	; 85
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	82 60       	ori	r24, 0x02	; 2
    149c:	8c 93       	st	X, r24
    149e:	96 c0       	rjmp	.+300    	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 	 	 	 	 	 break ;
	 	 	 	    case 3 : SET_BIT(MCUCR,MCUCR_ISC00);
    14a0:	a5 e5       	ldi	r26, 0x55	; 85
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e5       	ldi	r30, 0x55	; 85
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	81 60       	ori	r24, 0x01	; 1
    14ac:	8c 93       	st	X, r24
	 	 	 	 	 	 	 SET_BIT(MCUCR,MCUCR_ISC01);
    14ae:	a5 e5       	ldi	r26, 0x55	; 85
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e5       	ldi	r30, 0x55	; 85
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	82 60       	ori	r24, 0x02	; 2
    14ba:	8c 93       	st	X, r24
    14bc:	87 c0       	rjmp	.+270    	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 	 	 	 	 	 break ;
	 	 	 	 	}
	 	 	 	 	 break ;
	 	 case   1 :
	 		SET_BIT(GICR,GICR_INT1) ;
    14be:	ab e5       	ldi	r26, 0x5B	; 91
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	eb e5       	ldi	r30, 0x5B	; 91
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 68       	ori	r24, 0x80	; 128
    14ca:	8c 93       	st	X, r24
	 		 	 switch(Copy_u8SenseControl)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3e 83       	std	Y+6, r19	; 0x06
    14d4:	2d 83       	std	Y+5, r18	; 0x05
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	21 f1       	breq	.+72     	; 0x1528 <EXTIvoid_Enable+0x172>
    14e0:	2d 81       	ldd	r18, Y+5	; 0x05
    14e2:	3e 81       	ldd	r19, Y+6	; 0x06
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <EXTIvoid_Enable+0x13e>
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <EXTIvoid_Enable+0x154>
    14f2:	6c c0       	rjmp	.+216    	; 0x15cc <EXTIvoid_Enable+0x216>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	21 f1       	breq	.+72     	; 0x1546 <EXTIvoid_Enable+0x190>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	71 f1       	breq	.+92     	; 0x1564 <EXTIvoid_Enable+0x1ae>
    1508:	61 c0       	rjmp	.+194    	; 0x15cc <EXTIvoid_Enable+0x216>
	 		 	 {
						case 0 : CLR_BIT(MCUCR,MCUCR_ISC10);
    150a:	a5 e5       	ldi	r26, 0x55	; 85
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e5 e5       	ldi	r30, 0x55	; 85
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8b 7f       	andi	r24, 0xFB	; 251
    1516:	8c 93       	st	X, r24
								 CLR_BIT(MCUCR,MCUCR_ISC11);
    1518:	a5 e5       	ldi	r26, 0x55	; 85
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e5       	ldi	r30, 0x55	; 85
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	87 7f       	andi	r24, 0xF7	; 247
    1524:	8c 93       	st	X, r24
    1526:	52 c0       	rjmp	.+164    	; 0x15cc <EXTIvoid_Enable+0x216>
								 break ;
						case 1 : SET_BIT(MCUCR,MCUCR_ISC10);
    1528:	a5 e5       	ldi	r26, 0x55	; 85
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e5       	ldi	r30, 0x55	; 85
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24
								 CLR_BIT(MCUCR,MCUCR_ISC11);
    1536:	a5 e5       	ldi	r26, 0x55	; 85
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e5       	ldi	r30, 0x55	; 85
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	87 7f       	andi	r24, 0xF7	; 247
    1542:	8c 93       	st	X, r24
    1544:	43 c0       	rjmp	.+134    	; 0x15cc <EXTIvoid_Enable+0x216>
								  break ;
						case 2 : CLR_BIT(MCUCR,MCUCR_ISC10);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8b 7f       	andi	r24, 0xFB	; 251
    1552:	8c 93       	st	X, r24
								 SET_BIT(MCUCR,MCUCR_ISC11);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 60       	ori	r24, 0x08	; 8
    1560:	8c 93       	st	X, r24
    1562:	34 c0       	rjmp	.+104    	; 0x15cc <EXTIvoid_Enable+0x216>
								 break ;
						case 3 : SET_BIT(MCUCR,MCUCR_ISC10);
    1564:	a5 e5       	ldi	r26, 0x55	; 85
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e5       	ldi	r30, 0x55	; 85
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	8c 93       	st	X, r24
								 SET_BIT(MCUCR,MCUCR_ISC11);
    1572:	a5 e5       	ldi	r26, 0x55	; 85
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e5       	ldi	r30, 0x55	; 85
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	88 60       	ori	r24, 0x08	; 8
    157e:	8c 93       	st	X, r24
    1580:	25 c0       	rjmp	.+74     	; 0x15cc <EXTIvoid_Enable+0x216>
								 break ;
	 	 	}
	 	 break ;
	 	 case 	2 :
	 		SET_BIT(GICR,GICR_INT2) ;
    1582:	ab e5       	ldi	r26, 0x5B	; 91
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e5       	ldi	r30, 0x5B	; 91
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 62       	ori	r24, 0x20	; 32
    158e:	8c 93       	st	X, r24
	 		 switch(Copy_u8SenseControl)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3c 83       	std	Y+4, r19	; 0x04
    1598:	2b 83       	std	Y+3, r18	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	31 f0       	breq	.+12     	; 0x15ae <EXTIvoid_Enable+0x1f8>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	21 30       	cpi	r18, 0x01	; 1
    15a8:	31 05       	cpc	r19, r1
    15aa:	49 f0       	breq	.+18     	; 0x15be <EXTIvoid_Enable+0x208>
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 	{
	 	 	case 0 : CLR_BIT(MCUCSR,MCUCSR_ISC2);
    15ae:	a4 e5       	ldi	r26, 0x54	; 84
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e4 e5       	ldi	r30, 0x54	; 84
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 7b       	andi	r24, 0xBF	; 191
    15ba:	8c 93       	st	X, r24
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <EXTIvoid_Enable+0x216>
	 	 			 break ;
	 	 	case 1 : SET_BIT(MCUCSR,MCUCSR_ISC2);
    15be:	a4 e5       	ldi	r26, 0x54	; 84
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e4 e5       	ldi	r30, 0x54	; 84
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	80 64       	ori	r24, 0x40	; 64
    15ca:	8c 93       	st	X, r24
	 	 	 	 	  break ;
	 	 	}
	 	 break ;
	 }
 }
    15cc:	2a 96       	adiw	r28, 0x0a	; 10
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <EXTIvoid_Disable>:
void EXTIvoid_Disable(u8 Copy_u8EXTINum)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <EXTIvoid_Disable+0x6>
    15e4:	0f 92       	push	r0
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTINum)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3b 83       	std	Y+3, r19	; 0x03
    15f4:	2a 83       	std	Y+2, r18	; 0x02
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	91 05       	cpc	r25, r1
    15fe:	89 f0       	breq	.+34     	; 0x1622 <EXTIvoid_Disable+0x44>
    1600:	2a 81       	ldd	r18, Y+2	; 0x02
    1602:	3b 81       	ldd	r19, Y+3	; 0x03
    1604:	22 30       	cpi	r18, 0x02	; 2
    1606:	31 05       	cpc	r19, r1
    1608:	a1 f0       	breq	.+40     	; 0x1632 <EXTIvoid_Disable+0x54>
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9b 81       	ldd	r25, Y+3	; 0x03
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	b9 f4       	brne	.+46     	; 0x1640 <EXTIvoid_Disable+0x62>
	{
	case 0 : CLR_BIT(GICR,GICR_INT0) ; break ;
    1612:	ab e5       	ldi	r26, 0x5B	; 91
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e5       	ldi	r30, 0x5B	; 91
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	8f 7b       	andi	r24, 0xBF	; 191
    161e:	8c 93       	st	X, r24
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <EXTIvoid_Disable+0x62>
	case 1 : CLR_BIT(GICR,GICR_INT1) ; break ;
    1622:	ab e5       	ldi	r26, 0x5B	; 91
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e5       	ldi	r30, 0x5B	; 91
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 77       	andi	r24, 0x7F	; 127
    162e:	8c 93       	st	X, r24
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <EXTIvoid_Disable+0x62>
	case 2 : CLR_BIT(GICR,GICR_INT2) ; break ;
    1632:	ab e5       	ldi	r26, 0x5B	; 91
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	eb e5       	ldi	r30, 0x5B	; 91
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 7d       	andi	r24, 0xDF	; 223
    163e:	8c 93       	st	X, r24
	}
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <EXTI_Set_voidCallBackINT0>:



void EXTI_Set_voidCallBackINT0(void (*Copy_ptrISR_FUNC)(void))
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <EXTI_Set_voidCallBackINT0+0x6>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
	PTRtoFUNC_INT_0 = Copy_ptrISR_FUNC ;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	90 93 c9 01 	sts	0x01C9, r25
    1662:	80 93 c8 01 	sts	0x01C8, r24
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <EXTI_Set_voidCallBackINT1>:
void EXTI_Set_voidCallBackINT1(void (*Copy_ptrISR_FUNC)(void))
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <EXTI_Set_voidCallBackINT1+0x6>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
	PTRtoFUNC_INT_1 = Copy_ptrISR_FUNC ;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	90 93 cb 01 	sts	0x01CB, r25
    1686:	80 93 ca 01 	sts	0x01CA, r24
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <EXTI_Set_voidCallBackINT2>:
void EXTI_Set_voidCallBackINT2(void (*Copy_ptrISR_FUNC)(void))
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <EXTI_Set_voidCallBackINT2+0x6>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
	PTRtoFUNC_INT_2 = Copy_ptrISR_FUNC ;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	90 93 cd 01 	sts	0x01CD, r25
    16aa:	80 93 cc 01 	sts	0x01CC, r24
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <__vector_1>:

void __vector_1 (void)    __attribute__((signal)) ;
void __vector_1 (void)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	if(PTRtoFUNC_INT_0 != NULL)
    16e2:	80 91 c8 01 	lds	r24, 0x01C8
    16e6:	90 91 c9 01 	lds	r25, 0x01C9
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <__vector_1+0x40>
	{
		PTRtoFUNC_INT_0();
    16ee:	e0 91 c8 01 	lds	r30, 0x01C8
    16f2:	f0 91 c9 01 	lds	r31, 0x01C9
    16f6:	09 95       	icall
	}
	else
	{
		/* DO NOTHING */
	}
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_2>:

void __vector_2 (void)    __attribute__((signal)) ;
void __vector_2 (void)
{
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	if(PTRtoFUNC_INT_1 != NULL)
    1748:	80 91 ca 01 	lds	r24, 0x01CA
    174c:	90 91 cb 01 	lds	r25, 0x01CB
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	29 f0       	breq	.+10     	; 0x175e <__vector_2+0x40>
		{
			PTRtoFUNC_INT_1();
    1754:	e0 91 ca 01 	lds	r30, 0x01CA
    1758:	f0 91 cb 01 	lds	r31, 0x01CB
    175c:	09 95       	icall
		}
		else
		{
			/* DO NOTHING */
		}
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	ff 91       	pop	r31
    1764:	ef 91       	pop	r30
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	0f 90       	pop	r0
    1780:	1f 90       	pop	r1
    1782:	18 95       	reti

00001784 <__vector_3>:

void __vector_3 (void)    __attribute__((signal)) ;
void __vector_3 (void)
{
    1784:	1f 92       	push	r1
    1786:	0f 92       	push	r0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	0f 92       	push	r0
    178c:	11 24       	eor	r1, r1
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	if(PTRtoFUNC_INT_2 != NULL)
    17ae:	80 91 cc 01 	lds	r24, 0x01CC
    17b2:	90 91 cd 01 	lds	r25, 0x01CD
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	29 f0       	breq	.+10     	; 0x17c4 <__vector_3+0x40>
		{
		PTRtoFUNC_INT_2();
    17ba:	e0 91 cc 01 	lds	r30, 0x01CC
    17be:	f0 91 cd 01 	lds	r31, 0x01CD
    17c2:	09 95       	icall
		}
		else
		{
			/* DO NOTHING */
		}
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <DIO_SetPort_Direction>:
#include "DIO_private.h"
#include "DIO_interface.h"


void DIO_SetPort_Direction(u8 Copy_u8PortNum , u8 Copy_u8Direction)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_SetPort_Direction+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <DIO_SetPort_Direction+0x8>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	3c 83       	std	Y+4, r19	; 0x04
    1802:	2b 83       	std	Y+3, r18	; 0x03
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	91 05       	cpc	r25, r1
    180c:	d1 f0       	breq	.+52     	; 0x1842 <DIO_SetPort_Direction+0x58>
    180e:	2b 81       	ldd	r18, Y+3	; 0x03
    1810:	3c 81       	ldd	r19, Y+4	; 0x04
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	2c f4       	brge	.+10     	; 0x1822 <DIO_SetPort_Direction+0x38>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	61 f0       	breq	.+24     	; 0x1838 <DIO_SetPort_Direction+0x4e>
    1820:	1e c0       	rjmp	.+60     	; 0x185e <DIO_SetPort_Direction+0x74>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	81 f0       	breq	.+32     	; 0x184c <DIO_SetPort_Direction+0x62>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	91 05       	cpc	r25, r1
    1834:	81 f0       	breq	.+32     	; 0x1856 <DIO_SetPort_Direction+0x6c>
    1836:	13 c0       	rjmp	.+38     	; 0x185e <DIO_SetPort_Direction+0x74>
	{
	case DIO_PORTA : DDRA = Copy_u8Direction ;
    1838:	ea e3       	ldi	r30, 0x3A	; 58
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24
    1840:	0e c0       	rjmp	.+28     	; 0x185e <DIO_SetPort_Direction+0x74>
	break ;
	case DIO_PORTB : DDRB = Copy_u8Direction ;
    1842:	e7 e3       	ldi	r30, 0x37	; 55
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	09 c0       	rjmp	.+18     	; 0x185e <DIO_SetPort_Direction+0x74>
	break ;
	case DIO_PORTC : DDRC = Copy_u8Direction ;
    184c:	e4 e3       	ldi	r30, 0x34	; 52
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
    1854:	04 c0       	rjmp	.+8      	; 0x185e <DIO_SetPort_Direction+0x74>
	break ;
	case DIO_PORTD : DDRD = Copy_u8Direction ;
    1856:	e1 e3       	ldi	r30, 0x31	; 49
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
	break ;
	}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <DIO_SetPort_value>:

void DIO_SetPort_value(u8 Copy_u8PortNum , u8 Copy_u8PortValue)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <DIO_SetPort_value+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <DIO_SetPort_value+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3c 83       	std	Y+4, r19	; 0x04
    1884:	2b 83       	std	Y+3, r18	; 0x03
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	d1 f0       	breq	.+52     	; 0x18c4 <DIO_SetPort_value+0x58>
    1890:	2b 81       	ldd	r18, Y+3	; 0x03
    1892:	3c 81       	ldd	r19, Y+4	; 0x04
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	2c f4       	brge	.+10     	; 0x18a4 <DIO_SetPort_value+0x38>
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	61 f0       	breq	.+24     	; 0x18ba <DIO_SetPort_value+0x4e>
    18a2:	1e c0       	rjmp	.+60     	; 0x18e0 <DIO_SetPort_value+0x74>
    18a4:	2b 81       	ldd	r18, Y+3	; 0x03
    18a6:	3c 81       	ldd	r19, Y+4	; 0x04
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	81 f0       	breq	.+32     	; 0x18ce <DIO_SetPort_value+0x62>
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	81 f0       	breq	.+32     	; 0x18d8 <DIO_SetPort_value+0x6c>
    18b8:	13 c0       	rjmp	.+38     	; 0x18e0 <DIO_SetPort_value+0x74>
	{
	case DIO_PORTA : PORTA = Copy_u8PortValue ;
    18ba:	eb e3       	ldi	r30, 0x3B	; 59
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	80 83       	st	Z, r24
    18c2:	0e c0       	rjmp	.+28     	; 0x18e0 <DIO_SetPort_value+0x74>
	break ;
	case DIO_PORTB : PORTB = Copy_u8PortValue ;
    18c4:	e8 e3       	ldi	r30, 0x38	; 56
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	80 83       	st	Z, r24
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <DIO_SetPort_value+0x74>
	break ;
	case DIO_PORTC : PORTC = Copy_u8PortValue ;
    18ce:	e5 e3       	ldi	r30, 0x35	; 53
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	80 83       	st	Z, r24
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <DIO_SetPort_value+0x74>
	break ;
	case DIO_PORTD : PORTD = Copy_u8PortValue ;
    18d8:	e2 e3       	ldi	r30, 0x32	; 50
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
	break ;
	}
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <DIO_SetPin_Direction>:



void DIO_SetPin_Direction(u8 Copy_u8PortNum , u8 Copy_u8PinNum , u8 Copy_u8Direction)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	27 97       	sbiw	r28, 0x07	; 7
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	6a 83       	std	Y+2, r22	; 0x02
    1906:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == PIN_OUTPUT)
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	09 f0       	breq	.+2      	; 0x1910 <DIO_SetPin_Direction+0x22>
    190e:	6f c0       	rjmp	.+222    	; 0x19ee <DIO_SetPin_Direction+0x100>
	{
		switch(Copy_u8PortNum)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3f 83       	std	Y+7, r19	; 0x07
    1918:	2e 83       	std	Y+6, r18	; 0x06
    191a:	8e 81       	ldd	r24, Y+6	; 0x06
    191c:	9f 81       	ldd	r25, Y+7	; 0x07
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	49 f1       	breq	.+82     	; 0x1976 <DIO_SetPin_Direction+0x88>
    1924:	2e 81       	ldd	r18, Y+6	; 0x06
    1926:	3f 81       	ldd	r19, Y+7	; 0x07
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <DIO_SetPin_Direction+0x4a>
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	9f 81       	ldd	r25, Y+7	; 0x07
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f0       	breq	.+24     	; 0x194e <DIO_SetPin_Direction+0x60>
    1936:	d2 c0       	rjmp	.+420    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
    1938:	2e 81       	ldd	r18, Y+6	; 0x06
    193a:	3f 81       	ldd	r19, Y+7	; 0x07
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	71 f1       	breq	.+92     	; 0x199e <DIO_SetPin_Direction+0xb0>
    1942:	8e 81       	ldd	r24, Y+6	; 0x06
    1944:	9f 81       	ldd	r25, Y+7	; 0x07
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	e9 f1       	breq	.+122    	; 0x19c6 <DIO_SetPin_Direction+0xd8>
    194c:	c7 c0       	rjmp	.+398    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		{
		case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNum) ;
    194e:	aa e3       	ldi	r26, 0x3A	; 58
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ea e3       	ldi	r30, 0x3A	; 58
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_SetPin_Direction+0x7e>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_SetPin_Direction+0x7a>
    1970:	84 2b       	or	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	b3 c0       	rjmp	.+358    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNum) ;
    1976:	a7 e3       	ldi	r26, 0x37	; 55
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e7 e3       	ldi	r30, 0x37	; 55
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_SetPin_Direction+0xa6>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_SetPin_Direction+0xa2>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	9f c0       	rjmp	.+318    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTC : SET_BIT(DDRC,Copy_u8PinNum) ;
    199e:	a4 e3       	ldi	r26, 0x34	; 52
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e4 e3       	ldi	r30, 0x34	; 52
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_SetPin_Direction+0xce>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <DIO_SetPin_Direction+0xca>
    19c0:	84 2b       	or	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	8b c0       	rjmp	.+278    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTD : SET_BIT(DDRD,Copy_u8PinNum) ;
    19c6:	a1 e3       	ldi	r26, 0x31	; 49
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_SetPin_Direction+0xf6>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <DIO_SetPin_Direction+0xf2>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	77 c0       	rjmp	.+238    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		}

	}
	else if(Copy_u8Direction == PIN_INPUT)
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 23       	and	r24, r24
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <DIO_SetPin_Direction+0x108>
    19f4:	73 c0       	rjmp	.+230    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
	{
		switch(Copy_u8PortNum)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3d 83       	std	Y+5, r19	; 0x05
    19fe:	2c 83       	std	Y+4, r18	; 0x04
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	91 05       	cpc	r25, r1
    1a08:	59 f1       	breq	.+86     	; 0x1a60 <DIO_SetPin_Direction+0x172>
    1a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <DIO_SetPin_Direction+0x130>
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	9d 81       	ldd	r25, Y+5	; 0x05
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f0       	breq	.+26     	; 0x1a36 <DIO_SetPin_Direction+0x148>
    1a1c:	5f c0       	rjmp	.+190    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
    1a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a20:	3d 81       	ldd	r19, Y+5	; 0x05
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	89 f1       	breq	.+98     	; 0x1a8a <DIO_SetPin_Direction+0x19c>
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	91 05       	cpc	r25, r1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <DIO_SetPin_Direction+0x146>
    1a32:	40 c0       	rjmp	.+128    	; 0x1ab4 <DIO_SetPin_Direction+0x1c6>
    1a34:	53 c0       	rjmp	.+166    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		{
		case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNum) ;
    1a36:	aa e3       	ldi	r26, 0x3A	; 58
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	ea e3       	ldi	r30, 0x3A	; 58
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_SetPin_Direction+0x166>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_SetPin_Direction+0x162>
    1a58:	80 95       	com	r24
    1a5a:	84 23       	and	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	3e c0       	rjmp	.+124    	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNum) ;
    1a60:	a7 e3       	ldi	r26, 0x37	; 55
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e7 e3       	ldi	r30, 0x37	; 55
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_SetPin_Direction+0x190>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_SetPin_Direction+0x18c>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	29 c0       	rjmp	.+82     	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PinNum) ;
    1a8a:	a4 e3       	ldi	r26, 0x34	; 52
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e4 e3       	ldi	r30, 0x34	; 52
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_SetPin_Direction+0x1ba>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <DIO_SetPin_Direction+0x1b6>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PinNum) ;
    1ab4:	a1 e3       	ldi	r26, 0x31	; 49
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e1 e3       	ldi	r30, 0x31	; 49
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_SetPin_Direction+0x1e4>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_SetPin_Direction+0x1e0>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
		break ;
		}
	}

}
    1adc:	27 96       	adiw	r28, 0x07	; 7
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <DIO_SetPinValue>:

void DIO_SetPinValue(u8 Copy_u8PortNum , u8 Copy_u8PinNum , u8 Copy_u8PinValue)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	27 97       	sbiw	r28, 0x07	; 7
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6a 83       	std	Y+2, r22	; 0x02
    1b06:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8PinValue == PIN_HIGH)
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <DIO_SetPinValue+0x22>
    1b0e:	6f c0       	rjmp	.+222    	; 0x1bee <DIO_SetPinValue+0x100>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PortNum)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3f 83       	std	Y+7, r19	; 0x07
    1b18:	2e 83       	std	Y+6, r18	; 0x06
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	91 05       	cpc	r25, r1
    1b22:	49 f1       	breq	.+82     	; 0x1b76 <DIO_SetPinValue+0x88>
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <DIO_SetPinValue+0x4a>
    1b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b30:	9f 81       	ldd	r25, Y+7	; 0x07
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <DIO_SetPinValue+0x60>
    1b36:	d2 c0       	rjmp	.+420    	; 0x1cdc <DIO_SetPinValue+0x1ee>
    1b38:	2e 81       	ldd	r18, Y+6	; 0x06
    1b3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	71 f1       	breq	.+92     	; 0x1b9e <DIO_SetPinValue+0xb0>
    1b42:	8e 81       	ldd	r24, Y+6	; 0x06
    1b44:	9f 81       	ldd	r25, Y+7	; 0x07
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	e9 f1       	breq	.+122    	; 0x1bc6 <DIO_SetPinValue+0xd8>
    1b4c:	c7 c0       	rjmp	.+398    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		{
		case DIO_PORTA: SET_BIT(PORTA,Copy_u8PinNum); break;
    1b4e:	ab e3       	ldi	r26, 0x3B	; 59
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_SetPinValue+0x7e>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_SetPinValue+0x7a>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	b3 c0       	rjmp	.+358    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		case DIO_PORTB: SET_BIT(PORTB,Copy_u8PinNum); break;
    1b76:	a8 e3       	ldi	r26, 0x38	; 56
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_SetPinValue+0xa6>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_SetPinValue+0xa2>
    1b98:	84 2b       	or	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	9f c0       	rjmp	.+318    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		case DIO_PORTC: SET_BIT(PORTC,Copy_u8PinNum); break;
    1b9e:	a5 e3       	ldi	r26, 0x35	; 53
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e5 e3       	ldi	r30, 0x35	; 53
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_SetPinValue+0xce>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_SetPinValue+0xca>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	8b c0       	rjmp	.+278    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		case DIO_PORTD: SET_BIT(PORTD,Copy_u8PinNum); break;
    1bc6:	a2 e3       	ldi	r26, 0x32	; 50
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_SetPinValue+0xf6>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_SetPinValue+0xf2>
    1be8:	84 2b       	or	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	77 c0       	rjmp	.+238    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		}

	}

	else if (Copy_u8PinValue == PIN_LOW)
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <DIO_SetPinValue+0x108>
    1bf4:	73 c0       	rjmp	.+230    	; 0x1cdc <DIO_SetPinValue+0x1ee>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PortNum)
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3d 83       	std	Y+5, r19	; 0x05
    1bfe:	2c 83       	std	Y+4, r18	; 0x04
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	91 05       	cpc	r25, r1
    1c08:	59 f1       	breq	.+86     	; 0x1c60 <DIO_SetPinValue+0x172>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <DIO_SetPinValue+0x130>
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f0       	breq	.+26     	; 0x1c36 <DIO_SetPinValue+0x148>
    1c1c:	5f c0       	rjmp	.+190    	; 0x1cdc <DIO_SetPinValue+0x1ee>
    1c1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c20:	3d 81       	ldd	r19, Y+5	; 0x05
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	89 f1       	breq	.+98     	; 0x1c8a <DIO_SetPinValue+0x19c>
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	83 30       	cpi	r24, 0x03	; 3
    1c2e:	91 05       	cpc	r25, r1
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <DIO_SetPinValue+0x146>
    1c32:	40 c0       	rjmp	.+128    	; 0x1cb4 <DIO_SetPinValue+0x1c6>
    1c34:	53 c0       	rjmp	.+166    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		{
		case DIO_PORTA: CLR_BIT(PORTA,Copy_u8PinNum); break;
    1c36:	ab e3       	ldi	r26, 0x3B	; 59
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	eb e3       	ldi	r30, 0x3B	; 59
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_SetPinValue+0x166>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_SetPinValue+0x162>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	3e c0       	rjmp	.+124    	; 0x1cdc <DIO_SetPinValue+0x1ee>
		case DIO_PORTB: CLR_BIT(PORTB,Copy_u8PinNum); break;
    1c60:	a8 e3       	ldi	r26, 0x38	; 56
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e8 e3       	ldi	r30, 0x38	; 56
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <DIO_SetPinValue+0x190>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <DIO_SetPinValue+0x18c>
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	29 c0       	rjmp	.+82     	; 0x1cdc <DIO_SetPinValue+0x1ee>
		case DIO_PORTC: CLR_BIT(PORTC,Copy_u8PinNum); break;
    1c8a:	a5 e3       	ldi	r26, 0x35	; 53
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e5 e3       	ldi	r30, 0x35	; 53
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_SetPinValue+0x1ba>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_SetPinValue+0x1b6>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <DIO_SetPinValue+0x1ee>
		case DIO_PORTD: CLR_BIT(PORTD,Copy_u8PinNum); break;
    1cb4:	a2 e3       	ldi	r26, 0x32	; 50
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_SetPinValue+0x1e4>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_SetPinValue+0x1e0>
    1cd6:	80 95       	com	r24
    1cd8:	84 23       	and	r24, r20
    1cda:	8c 93       	st	X, r24
		}
	}

}
    1cdc:	27 96       	adiw	r28, 0x07	; 7
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <DIO_TogglePin>:

void DIO_TogglePin(u8 Copy_u8PortNum , u8 Copy_u8PinNum )
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <DIO_TogglePin+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <DIO_TogglePin+0x8>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	6a 83       	std	Y+2, r22	; 0x02
		/* Check on the Required PORT Number */
		switch (Copy_u8PortNum)
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	49 f1       	breq	.+82     	; 0x1d64 <DIO_TogglePin+0x76>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <DIO_TogglePin+0x38>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <DIO_TogglePin+0x4e>
    1d24:	5a c0       	rjmp	.+180    	; 0x1dda <DIO_TogglePin+0xec>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	71 f1       	breq	.+92     	; 0x1d8c <DIO_TogglePin+0x9e>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	e9 f1       	breq	.+122    	; 0x1db4 <DIO_TogglePin+0xc6>
    1d3a:	4f c0       	rjmp	.+158    	; 0x1dda <DIO_TogglePin+0xec>
		{
		case DIO_PORTA: TOGGLE_BIT(PORTA,Copy_u8PinNum); break;
    1d3c:	ab e3       	ldi	r26, 0x3B	; 59
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	eb e3       	ldi	r30, 0x3B	; 59
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_TogglePin+0x6c>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <DIO_TogglePin+0x68>
    1d5e:	84 27       	eor	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	3b c0       	rjmp	.+118    	; 0x1dda <DIO_TogglePin+0xec>
		case DIO_PORTB: TOGGLE_BIT(PORTB,Copy_u8PinNum); break;
    1d64:	a8 e3       	ldi	r26, 0x38	; 56
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 e3       	ldi	r30, 0x38	; 56
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_TogglePin+0x94>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_TogglePin+0x90>
    1d86:	84 27       	eor	r24, r20
    1d88:	8c 93       	st	X, r24
    1d8a:	27 c0       	rjmp	.+78     	; 0x1dda <DIO_TogglePin+0xec>
		case DIO_PORTC: TOGGLE_BIT(PORTC,Copy_u8PinNum); break;
    1d8c:	a5 e3       	ldi	r26, 0x35	; 53
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e5 e3       	ldi	r30, 0x35	; 53
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_TogglePin+0xbc>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_TogglePin+0xb8>
    1dae:	84 27       	eor	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	13 c0       	rjmp	.+38     	; 0x1dda <DIO_TogglePin+0xec>
		case DIO_PORTD: TOGGLE_BIT(PORTD,Copy_u8PinNum); break;
    1db4:	a2 e3       	ldi	r26, 0x32	; 50
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e2 e3       	ldi	r30, 0x32	; 50
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_TogglePin+0xe4>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <DIO_TogglePin+0xe0>
    1dd6:	84 27       	eor	r24, r20
    1dd8:	8c 93       	st	X, r24
		}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <DIO_GetPinValue>:

u8 	 DIO_GetPinValue(u8 Copy_u8PortNum , u8 Copy_u8PinNum )
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <DIO_GetPinValue+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <DIO_GetPinValue+0x8>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	8a 83       	std	Y+2, r24	; 0x02
    1df8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0 ;
    1dfa:	19 82       	std	Y+1, r1	; 0x01

	/* Check on the Required PORT Number */
	switch (Copy_u8PortNum)
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	3d 83       	std	Y+5, r19	; 0x05
    1e04:	2c 83       	std	Y+4, r18	; 0x04
    1e06:	4c 81       	ldd	r20, Y+4	; 0x04
    1e08:	5d 81       	ldd	r21, Y+5	; 0x05
    1e0a:	41 30       	cpi	r20, 0x01	; 1
    1e0c:	51 05       	cpc	r21, r1
    1e0e:	41 f1       	breq	.+80     	; 0x1e60 <DIO_GetPinValue+0x78>
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	91 05       	cpc	r25, r1
    1e18:	34 f4       	brge	.+12     	; 0x1e26 <DIO_GetPinValue+0x3e>
    1e1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1e:	21 15       	cp	r18, r1
    1e20:	31 05       	cpc	r19, r1
    1e22:	61 f0       	breq	.+24     	; 0x1e3c <DIO_GetPinValue+0x54>
    1e24:	52 c0       	rjmp	.+164    	; 0x1eca <DIO_GetPinValue+0xe2>
    1e26:	4c 81       	ldd	r20, Y+4	; 0x04
    1e28:	5d 81       	ldd	r21, Y+5	; 0x05
    1e2a:	42 30       	cpi	r20, 0x02	; 2
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	51 f1       	breq	.+84     	; 0x1e84 <DIO_GetPinValue+0x9c>
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	9d 81       	ldd	r25, Y+5	; 0x05
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	b9 f1       	breq	.+110    	; 0x1ea8 <DIO_GetPinValue+0xc0>
    1e3a:	47 c0       	rjmp	.+142    	; 0x1eca <DIO_GetPinValue+0xe2>
	{
	case DIO_PORTA: Local_u8Result= GET_BIT(PINA,Copy_u8PinNum);
    1e3c:	e9 e3       	ldi	r30, 0x39	; 57
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <DIO_GetPinValue+0x6c>
    1e50:	55 95       	asr	r21
    1e52:	47 95       	ror	r20
    1e54:	8a 95       	dec	r24
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <DIO_GetPinValue+0x68>
    1e58:	ca 01       	movw	r24, r20
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	35 c0       	rjmp	.+106    	; 0x1eca <DIO_GetPinValue+0xe2>
	break;
	case DIO_PORTB: Local_u8Result= GET_BIT(PINB,Copy_u8PinNum);
    1e60:	e6 e3       	ldi	r30, 0x36	; 54
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a9 01       	movw	r20, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_GetPinValue+0x90>
    1e74:	55 95       	asr	r21
    1e76:	47 95       	ror	r20
    1e78:	8a 95       	dec	r24
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_GetPinValue+0x8c>
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	81 70       	andi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	23 c0       	rjmp	.+70     	; 0x1eca <DIO_GetPinValue+0xe2>
	break;
	case DIO_PORTC: Local_u8Result= GET_BIT(PINC,Copy_u8PinNum);
    1e84:	e3 e3       	ldi	r30, 0x33	; 51
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a9 01       	movw	r20, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_GetPinValue+0xb4>
    1e98:	55 95       	asr	r21
    1e9a:	47 95       	ror	r20
    1e9c:	8a 95       	dec	r24
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_GetPinValue+0xb0>
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	11 c0       	rjmp	.+34     	; 0x1eca <DIO_GetPinValue+0xe2>
	break;
	case DIO_PORTD: Local_u8Result= GET_BIT(PIND,Copy_u8PinNum);
    1ea8:	e0 e3       	ldi	r30, 0x30	; 48
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a9 01       	movw	r20, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_GetPinValue+0xd8>
    1ebc:	55 95       	asr	r21
    1ebe:	47 95       	ror	r20
    1ec0:	8a 95       	dec	r24
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <DIO_GetPinValue+0xd4>
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	81 70       	andi	r24, 0x01	; 1
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	break;
	}

	return Local_u8Result;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <ADC_voidINIT>:
#include "ADC_interface.h"

 
 
void ADC_voidINIT(void)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(ADMUX,ADMUX_REFS1);
    1ee4:	a7 e2       	ldi	r26, 0x27	; 39
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e7 e2       	ldi	r30, 0x27	; 39
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8f 77       	andi	r24, 0x7F	; 127
    1ef0:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    1ef2:	a7 e2       	ldi	r26, 0x27	; 39
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e7 e2       	ldi	r30, 0x27	; 39
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 64       	ori	r24, 0x40	; 64
    1efe:	8c 93       	st	X, r24


	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1f00:	a6 e2       	ldi	r26, 0x26	; 38
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e6 e2       	ldi	r30, 0x26	; 38
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	81 60       	ori	r24, 0x01	; 1
    1f0c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1f0e:	a6 e2       	ldi	r26, 0x26	; 38
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e6 e2       	ldi	r30, 0x26	; 38
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1f1c:	a6 e2       	ldi	r26, 0x26	; 38
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e6 e2       	ldi	r30, 0x26	; 38
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	84 60       	ori	r24, 0x04	; 4
    1f28:	8c 93       	st	X, r24


	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1f2a:	a6 e2       	ldi	r26, 0x26	; 38
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e6 e2       	ldi	r30, 0x26	; 38
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 68       	ori	r24, 0x80	; 128
    1f36:	8c 93       	st	X, r24

}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <ADC_u16GetChannelReading>:

u16 ADC_u16GetChannelReading(u8 Copy_u8ChannelNum)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	0f 92       	push	r0
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    1f4a:	a7 e2       	ldi	r26, 0x27	; 39
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e7 e2       	ldi	r30, 0x27	; 39
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 7e       	andi	r24, 0xE0	; 224
    1f56:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum ;
    1f58:	a7 e2       	ldi	r26, 0x27	; 39
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e7 e2       	ldi	r30, 0x27	; 39
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	90 81       	ld	r25, Z
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	89 2b       	or	r24, r25
    1f66:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1f68:	a6 e2       	ldi	r26, 0x26	; 38
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e6 e2       	ldi	r30, 0x26	; 38
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 64       	ori	r24, 0x40	; 64
    1f74:	8c 93       	st	X, r24

	while( (GET_BIT(ADCSRA,ADCSRA_ADIF) ) ==  0);
    1f76:	e6 e2       	ldi	r30, 0x26	; 38
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	82 95       	swap	r24
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	81 70       	andi	r24, 0x01	; 1
    1f86:	90 70       	andi	r25, 0x00	; 0
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	a9 f3       	breq	.-22     	; 0x1f76 <ADC_u16GetChannelReading+0x38>

	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e6 e2       	ldi	r30, 0x26	; 38
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	80 61       	ori	r24, 0x10	; 16
    1f98:	8c 93       	st	X, r24

	return ADC ;
    1f9a:	e4 e2       	ldi	r30, 0x24	; 36
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <Map>:

#include "STD_TYPES.h"
#include "MAP.h"

s32 Map(s32 Input_Min , s32 Input_Max , s32 Output_Min ,s32 Output_Max , s32 Input_Val)
{
    1faa:	af 92       	push	r10
    1fac:	bf 92       	push	r11
    1fae:	cf 92       	push	r12
    1fb0:	df 92       	push	r13
    1fb2:	ef 92       	push	r14
    1fb4:	ff 92       	push	r15
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	64 97       	sbiw	r28, 0x14	; 20
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	6d 83       	std	Y+5, r22	; 0x05
    1fd0:	7e 83       	std	Y+6, r23	; 0x06
    1fd2:	8f 83       	std	Y+7, r24	; 0x07
    1fd4:	98 87       	std	Y+8, r25	; 0x08
    1fd6:	29 87       	std	Y+9, r18	; 0x09
    1fd8:	3a 87       	std	Y+10, r19	; 0x0a
    1fda:	4b 87       	std	Y+11, r20	; 0x0b
    1fdc:	5c 87       	std	Y+12, r21	; 0x0c
    1fde:	ed 86       	std	Y+13, r14	; 0x0d
    1fe0:	fe 86       	std	Y+14, r15	; 0x0e
    1fe2:	0f 87       	std	Y+15, r16	; 0x0f
    1fe4:	18 8b       	std	Y+16, r17	; 0x10
    1fe6:	a9 8a       	std	Y+17, r10	; 0x11
    1fe8:	ba 8a       	std	Y+18, r11	; 0x12
    1fea:	cb 8a       	std	Y+19, r12	; 0x13
    1fec:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32ReturnOutput = 0 ;
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	1a 82       	std	Y+2, r1	; 0x02
    1ff2:	1b 82       	std	Y+3, r1	; 0x03
    1ff4:	1c 82       	std	Y+4, r1	; 0x04

    Local_s32ReturnOutput = ( ( (Input_Val - Input_Min) * (Output_Max - Output_Min) ) / (Input_Max - Input_Min) )  + Output_Min ;
    1ff6:	29 a1       	ldd	r18, Y+33	; 0x21
    1ff8:	3a a1       	ldd	r19, Y+34	; 0x22
    1ffa:	4b a1       	ldd	r20, Y+35	; 0x23
    1ffc:	5c a1       	ldd	r21, Y+36	; 0x24
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	af 81       	ldd	r26, Y+7	; 0x07
    2004:	b8 85       	ldd	r27, Y+8	; 0x08
    2006:	79 01       	movw	r14, r18
    2008:	8a 01       	movw	r16, r20
    200a:	e8 1a       	sub	r14, r24
    200c:	f9 0a       	sbc	r15, r25
    200e:	0a 0b       	sbc	r16, r26
    2010:	1b 0b       	sbc	r17, r27
    2012:	29 89       	ldd	r18, Y+17	; 0x11
    2014:	3a 89       	ldd	r19, Y+18	; 0x12
    2016:	4b 89       	ldd	r20, Y+19	; 0x13
    2018:	5c 89       	ldd	r21, Y+20	; 0x14
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	af 85       	ldd	r26, Y+15	; 0x0f
    2020:	b8 89       	ldd	r27, Y+16	; 0x10
    2022:	28 1b       	sub	r18, r24
    2024:	39 0b       	sbc	r19, r25
    2026:	4a 0b       	sbc	r20, r26
    2028:	5b 0b       	sbc	r21, r27
    202a:	c8 01       	movw	r24, r16
    202c:	b7 01       	movw	r22, r14
    202e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsi3>
    2032:	7b 01       	movw	r14, r22
    2034:	8c 01       	movw	r16, r24
    2036:	29 85       	ldd	r18, Y+9	; 0x09
    2038:	3a 85       	ldd	r19, Y+10	; 0x0a
    203a:	4b 85       	ldd	r20, Y+11	; 0x0b
    203c:	5c 85       	ldd	r21, Y+12	; 0x0c
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	af 81       	ldd	r26, Y+7	; 0x07
    2044:	b8 85       	ldd	r27, Y+8	; 0x08
    2046:	28 1b       	sub	r18, r24
    2048:	39 0b       	sbc	r19, r25
    204a:	4a 0b       	sbc	r20, r26
    204c:	5b 0b       	sbc	r21, r27
    204e:	c8 01       	movw	r24, r16
    2050:	b7 01       	movw	r22, r14
    2052:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__divmodsi4>
    2056:	da 01       	movw	r26, r20
    2058:	c9 01       	movw	r24, r18
    205a:	9c 01       	movw	r18, r24
    205c:	ad 01       	movw	r20, r26
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	af 85       	ldd	r26, Y+15	; 0x0f
    2064:	b8 89       	ldd	r27, Y+16	; 0x10
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	a4 1f       	adc	r26, r20
    206c:	b5 1f       	adc	r27, r21
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	ab 83       	std	Y+3, r26	; 0x03
    2074:	bc 83       	std	Y+4, r27	; 0x04
    
    return Local_s32ReturnOutput ;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	ab 81       	ldd	r26, Y+3	; 0x03
    207c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	64 96       	adiw	r28, 0x14	; 20
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	08 95       	ret

000020a4 <KPD_voidINIT>:
#include "KPD_private.h"
#include "KPD_config.h"
#include "KPD_interface.h"

void KPD_voidINIT(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Direction(KPD_PORT,Column_0,PIN_OUTPUT);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KPD_PORT,Column_1,PIN_OUTPUT);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KPD_PORT,Column_2,PIN_OUTPUT);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KPD_PORT,Column_3,PIN_OUTPUT);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	63 e0       	ldi	r22, 0x03	; 3
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>

	DIO_SetPin_Direction(KPD_PORT,ROW_0,PIN_INPUT);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	64 e0       	ldi	r22, 0x04	; 4
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KPD_PORT,ROW_1,PIN_INPUT);
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	65 e0       	ldi	r22, 0x05	; 5
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KPD_PORT,ROW_2,PIN_INPUT);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	66 e0       	ldi	r22, 0x06	; 6
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KPD_PORT,ROW_3,PIN_INPUT);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	67 e0       	ldi	r22, 0x07	; 7
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>

	DIO_SetPort_value(KPD_PORT,PORT_HIGH);
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	6f ef       	ldi	r22, 0xFF	; 255
    2100:	0e 94 36 0c 	call	0x186c	; 0x186c <DIO_SetPort_value>
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <KPD_u8GetPressedKey>:


 u8 KPD_u8GetPressedKey(void)
 {
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	a2 97       	sbiw	r28, 0x22	; 34
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
	 u8 KPD_VAL[4][4] = KPD_VAL_ARR;
    211e:	ce 01       	movw	r24, r28
    2120:	05 96       	adiw	r24, 0x05	; 5
    2122:	9f 8f       	std	Y+31, r25	; 0x1f
    2124:	8e 8f       	std	Y+30, r24	; 0x1e
    2126:	e6 eb       	ldi	r30, 0xB6	; 182
    2128:	f1 e0       	ldi	r31, 0x01	; 1
    212a:	f9 a3       	std	Y+33, r31	; 0x21
    212c:	e8 a3       	std	Y+32, r30	; 0x20
    212e:	f0 e1       	ldi	r31, 0x10	; 16
    2130:	fa a3       	std	Y+34, r31	; 0x22
    2132:	e8 a1       	ldd	r30, Y+32	; 0x20
    2134:	f9 a1       	ldd	r31, Y+33	; 0x21
    2136:	00 80       	ld	r0, Z
    2138:	88 a1       	ldd	r24, Y+32	; 0x20
    213a:	99 a1       	ldd	r25, Y+33	; 0x21
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	99 a3       	std	Y+33, r25	; 0x21
    2140:	88 a3       	std	Y+32, r24	; 0x20
    2142:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2144:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2146:	00 82       	st	Z, r0
    2148:	8e 8d       	ldd	r24, Y+30	; 0x1e
    214a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	9f 8f       	std	Y+31, r25	; 0x1f
    2150:	8e 8f       	std	Y+30, r24	; 0x1e
    2152:	9a a1       	ldd	r25, Y+34	; 0x22
    2154:	91 50       	subi	r25, 0x01	; 1
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	ea a1       	ldd	r30, Y+34	; 0x22
    215a:	ee 23       	and	r30, r30
    215c:	51 f7       	brne	.-44     	; 0x2132 <KPD_u8GetPressedKey+0x28>
	 u8 Local_u8ColumnIDX , Local_u8RowIDX ;
	 u8 Columns[4] = { Column_0 , Column_1 , Column_2 , Column_3  };
    215e:	1d 8a       	std	Y+21, r1	; 0x15
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	8e 8b       	std	Y+22, r24	; 0x16
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	8f 8b       	std	Y+23, r24	; 0x17
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	88 8f       	std	Y+24, r24	; 0x18
	 u8 ROWS[4] = {ROW_0 , ROW_1 , ROW_2 , ROW_3};
    216c:	84 e0       	ldi	r24, 0x04	; 4
    216e:	89 8f       	std	Y+25, r24	; 0x19
    2170:	85 e0       	ldi	r24, 0x05	; 5
    2172:	8a 8f       	std	Y+26, r24	; 0x1a
    2174:	86 e0       	ldi	r24, 0x06	; 6
    2176:	8b 8f       	std	Y+27, r24	; 0x1b
    2178:	87 e0       	ldi	r24, 0x07	; 7
    217a:	8c 8f       	std	Y+28, r24	; 0x1c
	 u8 Local_u8ButtonValue =  NO_PRESSED_KEY ;
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8ButtonStatus = PIN_HIGH ;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	89 83       	std	Y+1, r24	; 0x01
	 for(Local_u8ColumnIDX = 0 ; Local_u8ColumnIDX < 4 ; Local_u8ColumnIDX ++ )
    2184:	1c 82       	std	Y+4, r1	; 0x04
    2186:	70 c0       	rjmp	.+224    	; 0x2268 <KPD_u8GetPressedKey+0x15e>
	 {
		 /* Activate Column Index */
		 DIO_SetPinValue(KPD_PORT , Columns[Local_u8ColumnIDX],PIN_LOW);
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	ce 01       	movw	r24, r28
    2190:	45 96       	adiw	r24, 0x15	; 21
    2192:	fc 01       	movw	r30, r24
    2194:	e2 0f       	add	r30, r18
    2196:	f3 1f       	adc	r31, r19
    2198:	90 81       	ld	r25, Z
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	69 2f       	mov	r22, r25
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
		 for(Local_u8RowIDX = 0 ; Local_u8RowIDX < 4 ; Local_u8RowIDX ++)
    21a4:	1b 82       	std	Y+3, r1	; 0x03
    21a6:	4b c0       	rjmp	.+150    	; 0x223e <KPD_u8GetPressedKey+0x134>
		 {
			 Local_u8ButtonStatus = DIO_GetPinValue(KPD_PORT,ROWS[Local_u8RowIDX]);
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	ce 01       	movw	r24, r28
    21b0:	49 96       	adiw	r24, 0x19	; 25
    21b2:	fc 01       	movw	r30, r24
    21b4:	e2 0f       	add	r30, r18
    21b6:	f3 1f       	adc	r31, r19
    21b8:	90 81       	ld	r25, Z
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	69 2f       	mov	r22, r25
    21be:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <DIO_GetPinValue>
    21c2:	89 83       	std	Y+1, r24	; 0x01
			 if(Local_u8ButtonStatus == 0)
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	88 23       	and	r24, r24
    21c8:	b9 f5       	brne	.+110    	; 0x2238 <KPD_u8GetPressedKey+0x12e>
    21ca:	0e c0       	rjmp	.+28     	; 0x21e8 <KPD_u8GetPressedKey+0xde>
			 {
				 while( Local_u8ButtonStatus == PIN_LOW){
					 Local_u8ButtonStatus = DIO_GetPinValue(KPD_PORT,ROWS[Local_u8RowIDX]);
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	ce 01       	movw	r24, r28
    21d4:	49 96       	adiw	r24, 0x19	; 25
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	90 81       	ld	r25, Z
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	69 2f       	mov	r22, r25
    21e2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <DIO_GetPinValue>
    21e6:	89 83       	std	Y+1, r24	; 0x01
		 for(Local_u8RowIDX = 0 ; Local_u8RowIDX < 4 ; Local_u8RowIDX ++)
		 {
			 Local_u8ButtonStatus = DIO_GetPinValue(KPD_PORT,ROWS[Local_u8RowIDX]);
			 if(Local_u8ButtonStatus == 0)
			 {
				 while( Local_u8ButtonStatus == PIN_LOW){
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	88 23       	and	r24, r24
    21ec:	79 f3       	breq	.-34     	; 0x21cc <KPD_u8GetPressedKey+0xc2>
					 Local_u8ButtonStatus = DIO_GetPinValue(KPD_PORT,ROWS[Local_u8RowIDX]);
				 }
				 Local_u8ButtonValue = KPD_VAL[Local_u8RowIDX][Local_u8ColumnIDX] ;
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	48 2f       	mov	r20, r24
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	22 0f       	add	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	22 0f       	add	r18, r18
    2200:	33 1f       	adc	r19, r19
    2202:	ce 01       	movw	r24, r28
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	82 0f       	add	r24, r18
    2208:	93 1f       	adc	r25, r19
    220a:	84 0f       	add	r24, r20
    220c:	95 1f       	adc	r25, r21
    220e:	fc 01       	movw	r30, r24
    2210:	34 96       	adiw	r30, 0x04	; 4
    2212:	80 81       	ld	r24, Z
    2214:	8a 83       	std	Y+2, r24	; 0x02
				 DIO_SetPinValue(KPD_PORT , Columns[Local_u8ColumnIDX],PIN_HIGH);
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	ce 01       	movw	r24, r28
    221e:	45 96       	adiw	r24, 0x15	; 21
    2220:	fc 01       	movw	r30, r24
    2222:	e2 0f       	add	r30, r18
    2224:	f3 1f       	adc	r31, r19
    2226:	90 81       	ld	r25, Z
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	69 2f       	mov	r22, r25
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
				 return Local_u8ButtonValue ;
    2232:	fa 81       	ldd	r31, Y+2	; 0x02
    2234:	fd 8f       	std	Y+29, r31	; 0x1d
    2236:	1e c0       	rjmp	.+60     	; 0x2274 <KPD_u8GetPressedKey+0x16a>
	 u8 Local_u8ButtonStatus = PIN_HIGH ;
	 for(Local_u8ColumnIDX = 0 ; Local_u8ColumnIDX < 4 ; Local_u8ColumnIDX ++ )
	 {
		 /* Activate Column Index */
		 DIO_SetPinValue(KPD_PORT , Columns[Local_u8ColumnIDX],PIN_LOW);
		 for(Local_u8RowIDX = 0 ; Local_u8RowIDX < 4 ; Local_u8RowIDX ++)
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	8b 83       	std	Y+3, r24	; 0x03
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	84 30       	cpi	r24, 0x04	; 4
    2242:	08 f4       	brcc	.+2      	; 0x2246 <KPD_u8GetPressedKey+0x13c>
    2244:	b1 cf       	rjmp	.-158    	; 0x21a8 <KPD_u8GetPressedKey+0x9e>
				 Local_u8ButtonValue = KPD_VAL[Local_u8RowIDX][Local_u8ColumnIDX] ;
				 DIO_SetPinValue(KPD_PORT , Columns[Local_u8ColumnIDX],PIN_HIGH);
				 return Local_u8ButtonValue ;
			 }
		 }
		 DIO_SetPinValue(KPD_PORT , Columns[Local_u8ColumnIDX],PIN_HIGH);
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	ce 01       	movw	r24, r28
    224e:	45 96       	adiw	r24, 0x15	; 21
    2250:	fc 01       	movw	r30, r24
    2252:	e2 0f       	add	r30, r18
    2254:	f3 1f       	adc	r31, r19
    2256:	90 81       	ld	r25, Z
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	69 2f       	mov	r22, r25
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
	 u8 Local_u8ColumnIDX , Local_u8RowIDX ;
	 u8 Columns[4] = { Column_0 , Column_1 , Column_2 , Column_3  };
	 u8 ROWS[4] = {ROW_0 , ROW_1 , ROW_2 , ROW_3};
	 u8 Local_u8ButtonValue =  NO_PRESSED_KEY ;
	 u8 Local_u8ButtonStatus = PIN_HIGH ;
	 for(Local_u8ColumnIDX = 0 ; Local_u8ColumnIDX < 4 ; Local_u8ColumnIDX ++ )
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	8c 83       	std	Y+4, r24	; 0x04
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	84 30       	cpi	r24, 0x04	; 4
    226c:	08 f4       	brcc	.+2      	; 0x2270 <KPD_u8GetPressedKey+0x166>
    226e:	8c cf       	rjmp	.-232    	; 0x2188 <KPD_u8GetPressedKey+0x7e>
				 return Local_u8ButtonValue ;
			 }
		 }
		 DIO_SetPinValue(KPD_PORT , Columns[Local_u8ColumnIDX],PIN_HIGH);
	 }
	 return Local_u8ButtonValue ;
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	8d 8f       	std	Y+29, r24	; 0x1d
    2274:	8d 8d       	ldd	r24, Y+29	; 0x1d
 }
    2276:	a2 96       	adiw	r28, 0x22	; 34
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <KPD_GetMappedValue>:

 u8 KPD_GetMappedValue(u8 key)
 {
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <KPD_GetMappedValue+0x6>
    228e:	00 d0       	rcall	.+0      	; 0x2290 <KPD_GetMappedValue+0x8>
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
     switch(key)
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	3c 83       	std	Y+4, r19	; 0x04
    229e:	2b 83       	std	Y+3, r18	; 0x03
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	87 30       	cpi	r24, 0x07	; 7
    22a6:	91 05       	cpc	r25, r1
    22a8:	09 f4       	brne	.+2      	; 0x22ac <KPD_GetMappedValue+0x24>
    22aa:	6f c0       	rjmp	.+222    	; 0x238a <KPD_GetMappedValue+0x102>
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	28 30       	cpi	r18, 0x08	; 8
    22b2:	31 05       	cpc	r19, r1
    22b4:	54 f5       	brge	.+84     	; 0x230a <KPD_GetMappedValue+0x82>
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	83 30       	cpi	r24, 0x03	; 3
    22bc:	91 05       	cpc	r25, r1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <KPD_GetMappedValue+0x3a>
    22c0:	58 c0       	rjmp	.+176    	; 0x2372 <KPD_GetMappedValue+0xea>
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	24 30       	cpi	r18, 0x04	; 4
    22c8:	31 05       	cpc	r19, r1
    22ca:	94 f4       	brge	.+36     	; 0x22f0 <KPD_GetMappedValue+0x68>
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	91 05       	cpc	r25, r1
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <KPD_GetMappedValue+0x50>
    22d6:	47 c0       	rjmp	.+142    	; 0x2366 <KPD_GetMappedValue+0xde>
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	3c 81       	ldd	r19, Y+4	; 0x04
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	0c f0       	brlt	.+2      	; 0x22e4 <KPD_GetMappedValue+0x5c>
    22e2:	44 c0       	rjmp	.+136    	; 0x236c <KPD_GetMappedValue+0xe4>
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	09 f4       	brne	.+2      	; 0x22ee <KPD_GetMappedValue+0x66>
    22ec:	39 c0       	rjmp	.+114    	; 0x2360 <KPD_GetMappedValue+0xd8>
    22ee:	68 c0       	rjmp	.+208    	; 0x23c0 <KPD_GetMappedValue+0x138>
    22f0:	2b 81       	ldd	r18, Y+3	; 0x03
    22f2:	3c 81       	ldd	r19, Y+4	; 0x04
    22f4:	25 30       	cpi	r18, 0x05	; 5
    22f6:	31 05       	cpc	r19, r1
    22f8:	09 f4       	brne	.+2      	; 0x22fc <KPD_GetMappedValue+0x74>
    22fa:	41 c0       	rjmp	.+130    	; 0x237e <KPD_GetMappedValue+0xf6>
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	86 30       	cpi	r24, 0x06	; 6
    2302:	91 05       	cpc	r25, r1
    2304:	0c f0       	brlt	.+2      	; 0x2308 <KPD_GetMappedValue+0x80>
    2306:	3e c0       	rjmp	.+124    	; 0x2384 <KPD_GetMappedValue+0xfc>
    2308:	37 c0       	rjmp	.+110    	; 0x2378 <KPD_GetMappedValue+0xf0>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	2b 30       	cpi	r18, 0x0B	; 11
    2310:	31 05       	cpc	r19, r1
    2312:	09 f4       	brne	.+2      	; 0x2316 <KPD_GetMappedValue+0x8e>
    2314:	46 c0       	rjmp	.+140    	; 0x23a2 <KPD_GetMappedValue+0x11a>
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	8c 30       	cpi	r24, 0x0C	; 12
    231c:	91 05       	cpc	r25, r1
    231e:	5c f4       	brge	.+22     	; 0x2336 <KPD_GetMappedValue+0xae>
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	29 30       	cpi	r18, 0x09	; 9
    2326:	31 05       	cpc	r19, r1
    2328:	b1 f1       	breq	.+108    	; 0x2396 <KPD_GetMappedValue+0x10e>
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	8a 30       	cpi	r24, 0x0A	; 10
    2330:	91 05       	cpc	r25, r1
    2332:	a4 f5       	brge	.+104    	; 0x239c <KPD_GetMappedValue+0x114>
    2334:	2d c0       	rjmp	.+90     	; 0x2390 <KPD_GetMappedValue+0x108>
    2336:	2b 81       	ldd	r18, Y+3	; 0x03
    2338:	3c 81       	ldd	r19, Y+4	; 0x04
    233a:	2d 30       	cpi	r18, 0x0D	; 13
    233c:	31 05       	cpc	r19, r1
    233e:	b9 f1       	breq	.+110    	; 0x23ae <KPD_GetMappedValue+0x126>
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	8d 30       	cpi	r24, 0x0D	; 13
    2346:	91 05       	cpc	r25, r1
    2348:	7c f1       	brlt	.+94     	; 0x23a8 <KPD_GetMappedValue+0x120>
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	2e 30       	cpi	r18, 0x0E	; 14
    2350:	31 05       	cpc	r19, r1
    2352:	81 f1       	breq	.+96     	; 0x23b4 <KPD_GetMappedValue+0x12c>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	8f 30       	cpi	r24, 0x0F	; 15
    235a:	91 05       	cpc	r25, r1
    235c:	71 f1       	breq	.+92     	; 0x23ba <KPD_GetMappedValue+0x132>
    235e:	30 c0       	rjmp	.+96     	; 0x23c0 <KPD_GetMappedValue+0x138>
     {
         case 0: return '7';
    2360:	97 e3       	ldi	r25, 0x37	; 55
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	2f c0       	rjmp	.+94     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 1: return '8';
    2366:	28 e3       	ldi	r18, 0x38	; 56
    2368:	2a 83       	std	Y+2, r18	; 0x02
    236a:	2c c0       	rjmp	.+88     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 2: return '9';
    236c:	39 e3       	ldi	r19, 0x39	; 57
    236e:	3a 83       	std	Y+2, r19	; 0x02
    2370:	29 c0       	rjmp	.+82     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 3: return 'A';
    2372:	81 e4       	ldi	r24, 0x41	; 65
    2374:	8a 83       	std	Y+2, r24	; 0x02
    2376:	26 c0       	rjmp	.+76     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 4: return '4';
    2378:	94 e3       	ldi	r25, 0x34	; 52
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	23 c0       	rjmp	.+70     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 5: return '5';
    237e:	25 e3       	ldi	r18, 0x35	; 53
    2380:	2a 83       	std	Y+2, r18	; 0x02
    2382:	20 c0       	rjmp	.+64     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 6: return '6';
    2384:	36 e3       	ldi	r19, 0x36	; 54
    2386:	3a 83       	std	Y+2, r19	; 0x02
    2388:	1d c0       	rjmp	.+58     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 7: return 'B';
    238a:	82 e4       	ldi	r24, 0x42	; 66
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	1a c0       	rjmp	.+52     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 8: return '1';
    2390:	91 e3       	ldi	r25, 0x31	; 49
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	17 c0       	rjmp	.+46     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 9: return '2';
    2396:	22 e3       	ldi	r18, 0x32	; 50
    2398:	2a 83       	std	Y+2, r18	; 0x02
    239a:	14 c0       	rjmp	.+40     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 10:return '3';
    239c:	33 e3       	ldi	r19, 0x33	; 51
    239e:	3a 83       	std	Y+2, r19	; 0x02
    23a0:	11 c0       	rjmp	.+34     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 11:return 'C';
    23a2:	83 e4       	ldi	r24, 0x43	; 67
    23a4:	8a 83       	std	Y+2, r24	; 0x02
    23a6:	0e c0       	rjmp	.+28     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 12:return '*';
    23a8:	9a e2       	ldi	r25, 0x2A	; 42
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	0b c0       	rjmp	.+22     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 13:return '0';
    23ae:	20 e3       	ldi	r18, 0x30	; 48
    23b0:	2a 83       	std	Y+2, r18	; 0x02
    23b2:	08 c0       	rjmp	.+16     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 14:return '#';
    23b4:	33 e2       	ldi	r19, 0x23	; 35
    23b6:	3a 83       	std	Y+2, r19	; 0x02
    23b8:	05 c0       	rjmp	.+10     	; 0x23c4 <KPD_GetMappedValue+0x13c>
         case 15:return 'D';
    23ba:	84 e4       	ldi	r24, 0x44	; 68
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <KPD_GetMappedValue+0x13c>
         default: return NO_PRESSED_KEY;  // No key pressed or invalid key
    23c0:	9f ef       	ldi	r25, 0xFF	; 255
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
     }
 }
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include <util/delay.h>

 void CLCD_voidSendCommand(u8 Copy_u8Command)
 {
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	2f 97       	sbiw	r28, 0x0f	; 15
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	8f 87       	std	Y+15, r24	; 0x0f
	 /* Set RS For Command */

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,PIN_LOW);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>

	 /* Set R/W TO write */

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,PIN_LOW);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>

	 /* Send Command */

	 DIO_SetPort_value(CLCD_DATA_PORT,Copy_u8Command) ;
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	6f 85       	ldd	r22, Y+15	; 0x0f
    2402:	0e 94 36 0c 	call	0x186c	; 0x186c <DIO_SetPort_value>

	 /* Enable Pulse */

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_HIGH);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e4       	ldi	r27, 0x40	; 64
    2418:	8b 87       	std	Y+11, r24	; 0x0b
    241a:	9c 87       	std	Y+12, r25	; 0x0c
    241c:	ad 87       	std	Y+13, r26	; 0x0d
    241e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a ef       	ldi	r20, 0xFA	; 250
    242e:	54 e4       	ldi	r21, 0x44	; 68
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8f 83       	std	Y+7, r24	; 0x07
    243a:	98 87       	std	Y+8, r25	; 0x08
    243c:	a9 87       	std	Y+9, r26	; 0x09
    243e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	2c f4       	brge	.+10     	; 0x2462 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	3f c0       	rjmp	.+126    	; 0x24e0 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	4c f5       	brge	.+82     	; 0x24cc <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	6b 85       	ldd	r22, Y+11	; 0x0b
    247c:	7c 85       	ldd	r23, Y+12	; 0x0c
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <CLCD_voidSendCommand+0xee>
    24a4:	88 ec       	ldi	r24, 0xC8	; 200
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <CLCD_voidSendCommand+0xdc>
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <CLCD_voidSendCommand+0xd0>
    24ca:	14 c0       	rjmp	.+40     	; 0x24f4 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <CLCD_voidSendCommand+0x118>
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01

	 _delay_ms(2);

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_LOW);
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	62 e0       	ldi	r22, 0x02	; 2
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
 
 }
    24fe:	2f 96       	adiw	r28, 0x0f	; 15
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <CLCD_voidSendData>:
 
 void CLCD_voidSendData(u8 Copy_u8Data)
  {
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	2f 97       	sbiw	r28, 0x0f	; 15
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	8f 87       	std	Y+15, r24	; 0x0f
 	 /* Set RS For Command */

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,PIN_HIGH);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>

 	 /* Set R/W TO write */

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,PIN_LOW);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>

 	 /* Send Command */

 	 DIO_SetPort_value(CLCD_DATA_PORT,Copy_u8Data) ;
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	6f 85       	ldd	r22, Y+15	; 0x0f
    253e:	0e 94 36 0c 	call	0x186c	; 0x186c <DIO_SetPort_value>

 	 /* Enable Pulse */

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_HIGH);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	62 e0       	ldi	r22, 0x02	; 2
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e4       	ldi	r27, 0x40	; 64
    2554:	8b 87       	std	Y+11, r24	; 0x0b
    2556:	9c 87       	std	Y+12, r25	; 0x0c
    2558:	ad 87       	std	Y+13, r26	; 0x0d
    255a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8f 83       	std	Y+7, r24	; 0x07
    2576:	98 87       	std	Y+8, r25	; 0x08
    2578:	a9 87       	std	Y+9, r26	; 0x09
    257a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <CLCD_voidSendData+0x8e>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	3f c0       	rjmp	.+126    	; 0x261c <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    25bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <CLCD_voidSendData+0xee>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9c 83       	std	Y+4, r25	; 0x04
    25e6:	8b 83       	std	Y+3, r24	; 0x03
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <CLCD_voidSendData+0xdc>
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <CLCD_voidSendData+0xd0>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <CLCD_voidSendData+0x118>
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01

 	 _delay_ms(2);

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_LOW);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	62 e0       	ldi	r22, 0x02	; 2
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>

  }
    263a:	2f 96       	adiw	r28, 0x0f	; 15
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <CLCD_voidINIT>:

 void CLCD_voidINIT(void)
 {
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	e8 97       	sbiw	r28, 0x38	; 56
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a8 e4       	ldi	r26, 0x48	; 72
    2666:	b2 e4       	ldi	r27, 0x42	; 66
    2668:	8d ab       	std	Y+53, r24	; 0x35
    266a:	9e ab       	std	Y+54, r25	; 0x36
    266c:	af ab       	std	Y+55, r26	; 0x37
    266e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6d a9       	ldd	r22, Y+53	; 0x35
    2672:	7e a9       	ldd	r23, Y+54	; 0x36
    2674:	8f a9       	ldd	r24, Y+55	; 0x37
    2676:	98 ad       	ldd	r25, Y+56	; 0x38
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a ef       	ldi	r20, 0xFA	; 250
    267e:	54 e4       	ldi	r21, 0x44	; 68
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	89 ab       	std	Y+49, r24	; 0x31
    268a:	9a ab       	std	Y+50, r25	; 0x32
    268c:	ab ab       	std	Y+51, r26	; 0x33
    268e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2690:	69 a9       	ldd	r22, Y+49	; 0x31
    2692:	7a a9       	ldd	r23, Y+50	; 0x32
    2694:	8b a9       	ldd	r24, Y+51	; 0x33
    2696:	9c a9       	ldd	r25, Y+52	; 0x34
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <CLCD_voidINIT+0x66>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	98 ab       	std	Y+48, r25	; 0x30
    26ae:	8f a7       	std	Y+47, r24	; 0x2f
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <CLCD_voidINIT+0xe4>
	else if (__tmp > 65535)
    26b2:	69 a9       	ldd	r22, Y+49	; 0x31
    26b4:	7a a9       	ldd	r23, Y+50	; 0x32
    26b6:	8b a9       	ldd	r24, Y+51	; 0x33
    26b8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <CLCD_voidINIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6d a9       	ldd	r22, Y+53	; 0x35
    26cc:	7e a9       	ldd	r23, Y+54	; 0x36
    26ce:	8f a9       	ldd	r24, Y+55	; 0x37
    26d0:	98 ad       	ldd	r25, Y+56	; 0x38
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	98 ab       	std	Y+48, r25	; 0x30
    26f0:	8f a7       	std	Y+47, r24	; 0x2f
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <CLCD_voidINIT+0xc6>
    26f4:	88 ec       	ldi	r24, 0xC8	; 200
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9e a7       	std	Y+46, r25	; 0x2e
    26fa:	8d a7       	std	Y+45, r24	; 0x2d
    26fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    26fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <CLCD_voidINIT+0xb4>
    2704:	9e a7       	std	Y+46, r25	; 0x2e
    2706:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	8f a5       	ldd	r24, Y+47	; 0x2f
    270a:	98 a9       	ldd	r25, Y+48	; 0x30
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	98 ab       	std	Y+48, r25	; 0x30
    2710:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	8f a5       	ldd	r24, Y+47	; 0x2f
    2714:	98 a9       	ldd	r25, Y+48	; 0x30
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <CLCD_voidINIT+0xa8>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <CLCD_voidINIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	69 a9       	ldd	r22, Y+49	; 0x31
    271e:	7a a9       	ldd	r23, Y+50	; 0x32
    2720:	8b a9       	ldd	r24, Y+51	; 0x33
    2722:	9c a9       	ldd	r25, Y+52	; 0x34
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	98 ab       	std	Y+48, r25	; 0x30
    272e:	8f a7       	std	Y+47, r24	; 0x2f
    2730:	8f a5       	ldd	r24, Y+47	; 0x2f
    2732:	98 a9       	ldd	r25, Y+48	; 0x30
    2734:	9c a7       	std	Y+44, r25	; 0x2c
    2736:	8b a7       	std	Y+43, r24	; 0x2b
    2738:	8b a5       	ldd	r24, Y+43	; 0x2b
    273a:	9c a5       	ldd	r25, Y+44	; 0x2c
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <CLCD_voidINIT+0xf0>
    2740:	9c a7       	std	Y+44, r25	; 0x2c
    2742:	8b a7       	std	Y+43, r24	; 0x2b
	 /* wait 50 ms */

	 _delay_ms(50);

	 /* Set Function Set */
	 CLCD_voidSendCommand(Function_Set);
    2744:	88 e3       	ldi	r24, 0x38	; 56
    2746:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <CLCD_voidSendCommand>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e8       	ldi	r26, 0x80	; 128
    2750:	bf e3       	ldi	r27, 0x3F	; 63
    2752:	8f a3       	std	Y+39, r24	; 0x27
    2754:	98 a7       	std	Y+40, r25	; 0x28
    2756:	a9 a7       	std	Y+41, r26	; 0x29
    2758:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	6f a1       	ldd	r22, Y+39	; 0x27
    275c:	78 a5       	ldd	r23, Y+40	; 0x28
    275e:	89 a5       	ldd	r24, Y+41	; 0x29
    2760:	9a a5       	ldd	r25, Y+42	; 0x2a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8b a3       	std	Y+35, r24	; 0x23
    2774:	9c a3       	std	Y+36, r25	; 0x24
    2776:	ad a3       	std	Y+37, r26	; 0x25
    2778:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    277a:	6b a1       	ldd	r22, Y+35	; 0x23
    277c:	7c a1       	ldd	r23, Y+36	; 0x24
    277e:	8d a1       	ldd	r24, Y+37	; 0x25
    2780:	9e a1       	ldd	r25, Y+38	; 0x26
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <CLCD_voidINIT+0x150>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9a a3       	std	Y+34, r25	; 0x22
    2798:	89 a3       	std	Y+33, r24	; 0x21
    279a:	3f c0       	rjmp	.+126    	; 0x281a <CLCD_voidINIT+0x1ce>
	else if (__tmp > 65535)
    279c:	6b a1       	ldd	r22, Y+35	; 0x23
    279e:	7c a1       	ldd	r23, Y+36	; 0x24
    27a0:	8d a1       	ldd	r24, Y+37	; 0x25
    27a2:	9e a1       	ldd	r25, Y+38	; 0x26
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <CLCD_voidINIT+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	6f a1       	ldd	r22, Y+39	; 0x27
    27b6:	78 a5       	ldd	r23, Y+40	; 0x28
    27b8:	89 a5       	ldd	r24, Y+41	; 0x29
    27ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9a a3       	std	Y+34, r25	; 0x22
    27da:	89 a3       	std	Y+33, r24	; 0x21
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <CLCD_voidINIT+0x1b0>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	98 a3       	std	Y+32, r25	; 0x20
    27e4:	8f 8f       	std	Y+31, r24	; 0x1f
    27e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <CLCD_voidINIT+0x19e>
    27ee:	98 a3       	std	Y+32, r25	; 0x20
    27f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	89 a1       	ldd	r24, Y+33	; 0x21
    27f4:	9a a1       	ldd	r25, Y+34	; 0x22
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9a a3       	std	Y+34, r25	; 0x22
    27fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	89 a1       	ldd	r24, Y+33	; 0x21
    27fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <CLCD_voidINIT+0x192>
    2804:	14 c0       	rjmp	.+40     	; 0x282e <CLCD_voidINIT+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	6b a1       	ldd	r22, Y+35	; 0x23
    2808:	7c a1       	ldd	r23, Y+36	; 0x24
    280a:	8d a1       	ldd	r24, Y+37	; 0x25
    280c:	9e a1       	ldd	r25, Y+38	; 0x26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9a a3       	std	Y+34, r25	; 0x22
    2818:	89 a3       	std	Y+33, r24	; 0x21
    281a:	89 a1       	ldd	r24, Y+33	; 0x21
    281c:	9a a1       	ldd	r25, Y+34	; 0x22
    281e:	9e 8f       	std	Y+30, r25	; 0x1e
    2820:	8d 8f       	std	Y+29, r24	; 0x1d
    2822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2824:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <CLCD_voidINIT+0x1da>
    282a:	9e 8f       	std	Y+30, r25	; 0x1e
    282c:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
	 /* Display ON/OFF Control - no cursor - no blink */
	 CLCD_voidSendCommand(Display_Control);
    282e:	8c e0       	ldi	r24, 0x0C	; 12
    2830:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <CLCD_voidSendCommand>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	89 8f       	std	Y+25, r24	; 0x19
    283e:	9a 8f       	std	Y+26, r25	; 0x1a
    2840:	ab 8f       	std	Y+27, r26	; 0x1b
    2842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	69 8d       	ldd	r22, Y+25	; 0x19
    2846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8d 8b       	std	Y+21, r24	; 0x15
    285e:	9e 8b       	std	Y+22, r25	; 0x16
    2860:	af 8b       	std	Y+23, r26	; 0x17
    2862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <CLCD_voidINIT+0x23a>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <CLCD_voidINIT+0x2b8>
	else if (__tmp > 65535)
    2886:	6d 89       	ldd	r22, Y+21	; 0x15
    2888:	7e 89       	ldd	r23, Y+22	; 0x16
    288a:	8f 89       	ldd	r24, Y+23	; 0x17
    288c:	98 8d       	ldd	r25, Y+24	; 0x18
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <CLCD_voidINIT+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	69 8d       	ldd	r22, Y+25	; 0x19
    28a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <CLCD_voidINIT+0x29a>
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a 8b       	std	Y+18, r25	; 0x12
    28ce:	89 8b       	std	Y+17, r24	; 0x11
    28d0:	89 89       	ldd	r24, Y+17	; 0x11
    28d2:	9a 89       	ldd	r25, Y+18	; 0x12
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <CLCD_voidINIT+0x288>
    28d8:	9a 8b       	std	Y+18, r25	; 0x12
    28da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8b 89       	ldd	r24, Y+19	; 0x13
    28e8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <CLCD_voidINIT+0x27c>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <CLCD_voidINIT+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6d 89       	ldd	r22, Y+21	; 0x15
    28f2:	7e 89       	ldd	r23, Y+22	; 0x16
    28f4:	8f 89       	ldd	r24, Y+23	; 0x17
    28f6:	98 8d       	ldd	r25, Y+24	; 0x18
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	98 8b       	std	Y+16, r25	; 0x10
    290a:	8f 87       	std	Y+15, r24	; 0x0f
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	98 89       	ldd	r25, Y+16	; 0x10
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <CLCD_voidINIT+0x2c4>
    2914:	98 8b       	std	Y+16, r25	; 0x10
    2916:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
	 /* Display Clear */

	 CLCD_voidSendCommand(Display_Clear);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <CLCD_voidSendCommand>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e8       	ldi	r26, 0x80	; 128
    2924:	bf e3       	ldi	r27, 0x3F	; 63
    2926:	8b 87       	std	Y+11, r24	; 0x0b
    2928:	9c 87       	std	Y+12, r25	; 0x0c
    292a:	ad 87       	std	Y+13, r26	; 0x0d
    292c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2930:	7c 85       	ldd	r23, Y+12	; 0x0c
    2932:	8d 85       	ldd	r24, Y+13	; 0x0d
    2934:	9e 85       	ldd	r25, Y+14	; 0x0e
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a ef       	ldi	r20, 0xFA	; 250
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	8f 83       	std	Y+7, r24	; 0x07
    2948:	98 87       	std	Y+8, r25	; 0x08
    294a:	a9 87       	std	Y+9, r26	; 0x09
    294c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	2c f4       	brge	.+10     	; 0x2970 <CLCD_voidINIT+0x324>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	3f c0       	rjmp	.+126    	; 0x29ee <CLCD_voidINIT+0x3a2>
	else if (__tmp > 65535)
    2970:	6f 81       	ldd	r22, Y+7	; 0x07
    2972:	78 85       	ldd	r23, Y+8	; 0x08
    2974:	89 85       	ldd	r24, Y+9	; 0x09
    2976:	9a 85       	ldd	r25, Y+10	; 0x0a
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	3f ef       	ldi	r19, 0xFF	; 255
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	57 e4       	ldi	r21, 0x47	; 71
    2980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	4c f5       	brge	.+82     	; 0x29da <CLCD_voidINIT+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <CLCD_voidINIT+0x384>
    29b2:	88 ec       	ldi	r24, 0xC8	; 200
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c 83       	std	Y+4, r25	; 0x04
    29b8:	8b 83       	std	Y+3, r24	; 0x03
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <CLCD_voidINIT+0x372>
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <CLCD_voidINIT+0x366>
    29d8:	14 c0       	rjmp	.+40     	; 0x2a02 <CLCD_voidINIT+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <CLCD_voidINIT+0x3ae>
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);
 }
    2a02:	e8 96       	adiw	r28, 0x38	; 56
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <CLCD_voidSendString>:
 void CLCD_voidSendString(u8 * Copy_u8String)
 {
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <CLCD_voidSendString+0x6>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8Counter = 0 ;
    2a24:	19 82       	std	Y+1, r1	; 0x01
    2a26:	0e c0       	rjmp	.+28     	; 0x2a44 <CLCD_voidSendString+0x30>

	while(Copy_u8String[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	fc 01       	movw	r30, r24
    2a34:	e2 0f       	add	r30, r18
    2a36:	f3 1f       	adc	r31, r19
    2a38:	80 81       	ld	r24, Z
    2a3a:	0e 94 88 12 	call	0x2510	; 0x2510 <CLCD_voidSendData>
		Local_u8Counter++ ;
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	8f 5f       	subi	r24, 0xFF	; 255
    2a42:	89 83       	std	Y+1, r24	; 0x01
 }
 void CLCD_voidSendString(u8 * Copy_u8String)
 {
	 u8 Local_u8Counter = 0 ;

	while(Copy_u8String[Local_u8Counter] != '\0')
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4e:	fc 01       	movw	r30, r24
    2a50:	e2 0f       	add	r30, r18
    2a52:	f3 1f       	adc	r31, r19
    2a54:	80 81       	ld	r24, Z
    2a56:	88 23       	and	r24, r24
    2a58:	39 f7       	brne	.-50     	; 0x2a28 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
		Local_u8Counter++ ;
	}

 }
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <CLCD_voidWriteNumber>:
 void CLCD_voidWriteNumber(u16 Copy_u16Number)
 {
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	29 97       	sbiw	r28, 0x09	; 9
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	99 87       	std	Y+9, r25	; 0x09
    2a7c:	88 87       	std	Y+8, r24	; 0x08
     char buffer[6];
     u8 i = 0;
    2a7e:	19 82       	std	Y+1, r1	; 0x01
     if (Copy_u16Number == 0)
    2a80:	88 85       	ldd	r24, Y+8	; 0x08
    2a82:	99 85       	ldd	r25, Y+9	; 0x09
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	11 f5       	brne	.+68     	; 0x2acc <CLCD_voidWriteNumber+0x66>
     {
         CLCD_voidSendData('0');
    2a88:	80 e3       	ldi	r24, 0x30	; 48
    2a8a:	0e 94 88 12 	call	0x2510	; 0x2510 <CLCD_voidSendData>
    2a8e:	34 c0       	rjmp	.+104    	; 0x2af8 <CLCD_voidWriteNumber+0x92>
         return;
     }
     while (Copy_u16Number > 0)
     {
         buffer[i++] = (Copy_u16Number % 10) + '0';
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	e8 2f       	mov	r30, r24
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	88 85       	ldd	r24, Y+8	; 0x08
    2a98:	99 85       	ldd	r25, Y+9	; 0x09
    2a9a:	2a e0       	ldi	r18, 0x0A	; 10
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	b9 01       	movw	r22, r18
    2aa0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodhi4>
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	20 5d       	subi	r18, 0xD0	; 208
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	02 96       	adiw	r24, 0x02	; 2
    2aac:	e8 0f       	add	r30, r24
    2aae:	f9 1f       	adc	r31, r25
    2ab0:	20 83       	st	Z, r18
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	8f 5f       	subi	r24, 0xFF	; 255
    2ab6:	89 83       	std	Y+1, r24	; 0x01
         Copy_u16Number /= 10;
    2ab8:	88 85       	ldd	r24, Y+8	; 0x08
    2aba:	99 85       	ldd	r25, Y+9	; 0x09
    2abc:	2a e0       	ldi	r18, 0x0A	; 10
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	b9 01       	movw	r22, r18
    2ac2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__udivmodhi4>
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	99 87       	std	Y+9, r25	; 0x09
    2aca:	88 87       	std	Y+8, r24	; 0x08
     if (Copy_u16Number == 0)
     {
         CLCD_voidSendData('0');
         return;
     }
     while (Copy_u16Number > 0)
    2acc:	88 85       	ldd	r24, Y+8	; 0x08
    2ace:	99 85       	ldd	r25, Y+9	; 0x09
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	f1 f6       	brne	.-68     	; 0x2a90 <CLCD_voidWriteNumber+0x2a>
    2ad4:	0e c0       	rjmp	.+28     	; 0x2af2 <CLCD_voidWriteNumber+0x8c>
         buffer[i++] = (Copy_u16Number % 10) + '0';
         Copy_u16Number /= 10;
     }
     while (i > 0)
     {
         CLCD_voidSendData(buffer[--i]);
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	81 50       	subi	r24, 0x01	; 1
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	02 96       	adiw	r24, 0x02	; 2
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e2 0f       	add	r30, r18
    2aea:	f3 1f       	adc	r31, r19
    2aec:	80 81       	ld	r24, Z
    2aee:	0e 94 88 12 	call	0x2510	; 0x2510 <CLCD_voidSendData>
     while (Copy_u16Number > 0)
     {
         buffer[i++] = (Copy_u16Number % 10) + '0';
         Copy_u16Number /= 10;
     }
     while (i > 0)
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	88 23       	and	r24, r24
    2af6:	79 f7       	brne	.-34     	; 0x2ad6 <CLCD_voidWriteNumber+0x70>
     {
         CLCD_voidSendData(buffer[--i]);
     }
 }
    2af8:	29 96       	adiw	r28, 0x09	; 9
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <CLCD_voidGOTOXY>:

 void CLCD_voidGOTOXY(u8 Copy_u8row , u8 Copy_u8col)
 {
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <CLCD_voidGOTOXY+0x6>
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	6b 83       	std	Y+3, r22	; 0x03
	 u8 Local_u8Address = 0xff;
    2b1a:	8f ef       	ldi	r24, 0xFF	; 255
    2b1c:	89 83       	std	Y+1, r24	; 0x01

	 if(Copy_u8row>1)
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	82 30       	cpi	r24, 0x02	; 2
    2b22:	10 f0       	brcs	.+4      	; 0x2b28 <CLCD_voidGOTOXY+0x1e>
	 	 {
		 	 Copy_u8row=1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	8a 83       	std	Y+2, r24	; 0x02
	 	 }

	 Local_u8Address = 128 + (64 * Copy_u8row) + Copy_u8col  ;
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 96       	adiw	r24, 0x02	; 2
    2b30:	00 24       	eor	r0, r0
    2b32:	96 95       	lsr	r25
    2b34:	87 95       	ror	r24
    2b36:	07 94       	ror	r0
    2b38:	96 95       	lsr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	07 94       	ror	r0
    2b3e:	98 2f       	mov	r25, r24
    2b40:	80 2d       	mov	r24, r0
    2b42:	98 2f       	mov	r25, r24
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	89 0f       	add	r24, r25
    2b48:	89 83       	std	Y+1, r24	; 0x01
	 CLCD_voidSendCommand(Local_u8Address);
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <CLCD_voidSendCommand>
 }
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <CLCD_Clear>:

 void CLCD_Clear(void)
 {
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
	 CLCD_voidSendCommand(Display_Clear);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <CLCD_voidSendCommand>

 }
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <Get_Averaged_ADC_Readings>:
#define MAX_ATTEMPTS 3
#define LED_PIN DIO_PIN4
#define THRESHOLD_HIGH 2 // Increased threshold
#define THRESHOLD_LOW 0     // Increased threshold

u32 Get_Averaged_ADC_Readings(u8 channel) {
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	64 97       	sbiw	r28, 0x14	; 20
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	8c 8b       	std	Y+20, r24	; 0x14
    u32 sum = 0;
    2b86:	18 8a       	std	Y+16, r1	; 0x10
    2b88:	19 8a       	std	Y+17, r1	; 0x11
    2b8a:	1a 8a       	std	Y+18, r1	; 0x12
    2b8c:	1b 8a       	std	Y+19, r1	; 0x13
    for (u8 i = 0; i < 10; i++) {
    2b8e:	1f 86       	std	Y+15, r1	; 0x0f
    2b90:	87 c0       	rjmp	.+270    	; 0x2ca0 <Get_Averaged_ADC_Readings+0x130>
        sum += ADC_u16GetChannelReading(channel);
    2b92:	8c 89       	ldd	r24, Y+20	; 0x14
    2b94:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <ADC_u16GetChannelReading>
    2b98:	9c 01       	movw	r18, r24
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	88 89       	ldd	r24, Y+16	; 0x10
    2ba0:	99 89       	ldd	r25, Y+17	; 0x11
    2ba2:	aa 89       	ldd	r26, Y+18	; 0x12
    2ba4:	bb 89       	ldd	r27, Y+19	; 0x13
    2ba6:	82 0f       	add	r24, r18
    2ba8:	93 1f       	adc	r25, r19
    2baa:	a4 1f       	adc	r26, r20
    2bac:	b5 1f       	adc	r27, r21
    2bae:	88 8b       	std	Y+16, r24	; 0x10
    2bb0:	99 8b       	std	Y+17, r25	; 0x11
    2bb2:	aa 8b       	std	Y+18, r26	; 0x12
    2bb4:	bb 8b       	std	Y+19, r27	; 0x13
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e2       	ldi	r26, 0x20	; 32
    2bbc:	b1 e4       	ldi	r27, 0x41	; 65
    2bbe:	8b 87       	std	Y+11, r24	; 0x0b
    2bc0:	9c 87       	std	Y+12, r25	; 0x0c
    2bc2:	ad 87       	std	Y+13, r26	; 0x0d
    2bc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8f 83       	std	Y+7, r24	; 0x07
    2be0:	98 87       	std	Y+8, r25	; 0x08
    2be2:	a9 87       	std	Y+9, r26	; 0x09
    2be4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <Get_Averaged_ADC_Readings+0x98>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <Get_Averaged_ADC_Readings+0x116>
	else if (__tmp > 65535)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <Get_Averaged_ADC_Readings+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <Get_Averaged_ADC_Readings+0xf8>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <Get_Averaged_ADC_Readings+0xe6>
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <Get_Averaged_ADC_Readings+0xda>
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <Get_Averaged_ADC_Readings+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <Get_Averaged_ADC_Readings+0x122>
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
#define THRESHOLD_HIGH 2 // Increased threshold
#define THRESHOLD_LOW 0     // Increased threshold

u32 Get_Averaged_ADC_Readings(u8 channel) {
    u32 sum = 0;
    for (u8 i = 0; i < 10; i++) {
    2c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca2:	8a 30       	cpi	r24, 0x0A	; 10
    2ca4:	08 f4       	brcc	.+2      	; 0x2ca8 <Get_Averaged_ADC_Readings+0x138>
    2ca6:	75 cf       	rjmp	.-278    	; 0x2b92 <Get_Averaged_ADC_Readings+0x22>
        sum += ADC_u16GetChannelReading(channel);
        _delay_ms(10); // small delay between readings
    }
    return sum / 10; // return the average
    2ca8:	88 89       	ldd	r24, Y+16	; 0x10
    2caa:	99 89       	ldd	r25, Y+17	; 0x11
    2cac:	aa 89       	ldd	r26, Y+18	; 0x12
    2cae:	bb 89       	ldd	r27, Y+19	; 0x13
    2cb0:	2a e0       	ldi	r18, 0x0A	; 10
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodsi4>
    2cc0:	da 01       	movw	r26, r20
    2cc2:	c9 01       	movw	r24, r18
}
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	64 96       	adiw	r28, 0x14	; 20
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <monitor_LDR_DCMotor>:

void monitor_LDR_DCMotor(void)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	ec 97       	sbiw	r28, 0x3c	; 60
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
//	CLCD_voidGOTOXY(0,0);
//	CLCD_voidSendString("OK, TRY USING");
//	CLCD_voidGOTOXY(1,0);
//	CLCD_voidSendString("THE ");
   // Initialize ADC if not already done
	ADC_voidINIT();
    2cee:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <ADC_voidINIT>
  //int y=100;
//    while (1)
//    {
    	//LDR

    	DIO_SetPin_Direction(DIO_PORTA, DIO_PIN7, PIN_INPUT);
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	67 e0       	ldi	r22, 0x07	; 7
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
        u32 x = (Get_Averaged_ADC_Readings(7) * 50) / 1024;
    2cfc:	87 e0       	ldi	r24, 0x07	; 7
    2cfe:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Get_Averaged_ADC_Readings>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	22 e3       	ldi	r18, 0x32	; 50
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsi3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	07 2e       	mov	r0, r23
    2d1c:	7a e0       	ldi	r23, 0x0A	; 10
    2d1e:	b6 95       	lsr	r27
    2d20:	a7 95       	ror	r26
    2d22:	97 95       	ror	r25
    2d24:	87 95       	ror	r24
    2d26:	7a 95       	dec	r23
    2d28:	d1 f7       	brne	.-12     	; 0x2d1e <monitor_LDR_DCMotor+0x44>
    2d2a:	70 2d       	mov	r23, r0
    2d2c:	89 af       	std	Y+57, r24	; 0x39
    2d2e:	9a af       	std	Y+58, r25	; 0x3a
    2d30:	ab af       	std	Y+59, r26	; 0x3b
    2d32:	bc af       	std	Y+60, r27	; 0x3c

        DIO_SetPin_Direction(DIO_PORTA, DIO_PIN5, PIN_OUTPUT);
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	65 e0       	ldi	r22, 0x05	; 5
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>

        if (x < 1) {
    2d3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d40:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d42:	ab ad       	ldd	r26, Y+59	; 0x3b
    2d44:	bc ad       	ldd	r27, Y+60	; 0x3c
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	a1 05       	cpc	r26, r1
    2d4a:	b1 05       	cpc	r27, r1
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <monitor_LDR_DCMotor+0x76>
    2d4e:	78 c0       	rjmp	.+240    	; 0x2e40 <monitor_LDR_DCMotor+0x166>
            DIO_SetPinValue(DIO_PORTA, DIO_PIN5, PIN_LOW);
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	65 e0       	ldi	r22, 0x05	; 5
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d60:	b2 e4       	ldi	r27, 0x42	; 66
    2d62:	8d ab       	std	Y+53, r24	; 0x35
    2d64:	9e ab       	std	Y+54, r25	; 0x36
    2d66:	af ab       	std	Y+55, r26	; 0x37
    2d68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d70:	98 ad       	ldd	r25, Y+56	; 0x38
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a ef       	ldi	r20, 0xFA	; 250
    2d78:	54 e4       	ldi	r21, 0x44	; 68
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	89 ab       	std	Y+49, r24	; 0x31
    2d84:	9a ab       	std	Y+50, r25	; 0x32
    2d86:	ab ab       	std	Y+51, r26	; 0x33
    2d88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d90:	9c a9       	ldd	r25, Y+52	; 0x34
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <monitor_LDR_DCMotor+0xd2>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	98 ab       	std	Y+48, r25	; 0x30
    2da8:	8f a7       	std	Y+47, r24	; 0x2f
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <monitor_LDR_DCMotor+0x150>
	else if (__tmp > 65535)
    2dac:	69 a9       	ldd	r22, Y+49	; 0x31
    2dae:	7a a9       	ldd	r23, Y+50	; 0x32
    2db0:	8b a9       	ldd	r24, Y+51	; 0x33
    2db2:	9c a9       	ldd	r25, Y+52	; 0x34
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <monitor_LDR_DCMotor+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc6:	7e a9       	ldd	r23, Y+54	; 0x36
    2dc8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dca:	98 ad       	ldd	r25, Y+56	; 0x38
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	98 ab       	std	Y+48, r25	; 0x30
    2dea:	8f a7       	std	Y+47, r24	; 0x2f
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <monitor_LDR_DCMotor+0x132>
    2dee:	88 ec       	ldi	r24, 0xC8	; 200
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9e a7       	std	Y+46, r25	; 0x2e
    2df4:	8d a7       	std	Y+45, r24	; 0x2d
    2df6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2df8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <monitor_LDR_DCMotor+0x120>
    2dfe:	9e a7       	std	Y+46, r25	; 0x2e
    2e00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e04:	98 a9       	ldd	r25, Y+48	; 0x30
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	98 ab       	std	Y+48, r25	; 0x30
    2e0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <monitor_LDR_DCMotor+0x114>
    2e14:	8c c0       	rjmp	.+280    	; 0x2f2e <monitor_LDR_DCMotor+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	69 a9       	ldd	r22, Y+49	; 0x31
    2e18:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	98 ab       	std	Y+48, r25	; 0x30
    2e28:	8f a7       	std	Y+47, r24	; 0x2f
    2e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e2e:	9c a7       	std	Y+44, r25	; 0x2c
    2e30:	8b a7       	std	Y+43, r24	; 0x2b
    2e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <monitor_LDR_DCMotor+0x15c>
    2e3a:	9c a7       	std	Y+44, r25	; 0x2c
    2e3c:	8b a7       	std	Y+43, r24	; 0x2b
    2e3e:	77 c0       	rjmp	.+238    	; 0x2f2e <monitor_LDR_DCMotor+0x254>
            _delay_ms(100);

        } else {
            DIO_SetPinValue(DIO_PORTA, DIO_PIN5, PIN_HIGH);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	65 e0       	ldi	r22, 0x05	; 5
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	a8 ec       	ldi	r26, 0xC8	; 200
    2e50:	b2 e4       	ldi	r27, 0x42	; 66
    2e52:	8f a3       	std	Y+39, r24	; 0x27
    2e54:	98 a7       	std	Y+40, r25	; 0x28
    2e56:	a9 a7       	std	Y+41, r26	; 0x29
    2e58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a ef       	ldi	r20, 0xFA	; 250
    2e68:	54 e4       	ldi	r21, 0x44	; 68
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8b a3       	std	Y+35, r24	; 0x23
    2e74:	9c a3       	std	Y+36, r25	; 0x24
    2e76:	ad a3       	std	Y+37, r26	; 0x25
    2e78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e80:	9e a1       	ldd	r25, Y+38	; 0x26
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <monitor_LDR_DCMotor+0x1c2>
		__ticks = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9a a3       	std	Y+34, r25	; 0x22
    2e98:	89 a3       	std	Y+33, r24	; 0x21
    2e9a:	3f c0       	rjmp	.+126    	; 0x2f1a <monitor_LDR_DCMotor+0x240>
	else if (__tmp > 65535)
    2e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	3f ef       	ldi	r19, 0xFF	; 255
    2ea8:	4f e7       	ldi	r20, 0x7F	; 127
    2eaa:	57 e4       	ldi	r21, 0x47	; 71
    2eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb0:	18 16       	cp	r1, r24
    2eb2:	4c f5       	brge	.+82     	; 0x2f06 <monitor_LDR_DCMotor+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	51 e4       	ldi	r21, 0x41	; 65
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9a a3       	std	Y+34, r25	; 0x22
    2eda:	89 a3       	std	Y+33, r24	; 0x21
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <monitor_LDR_DCMotor+0x222>
    2ede:	88 ec       	ldi	r24, 0xC8	; 200
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	98 a3       	std	Y+32, r25	; 0x20
    2ee4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ee8:	98 a1       	ldd	r25, Y+32	; 0x20
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <monitor_LDR_DCMotor+0x210>
    2eee:	98 a3       	std	Y+32, r25	; 0x20
    2ef0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	9a a3       	std	Y+34, r25	; 0x22
    2efa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efc:	89 a1       	ldd	r24, Y+33	; 0x21
    2efe:	9a a1       	ldd	r25, Y+34	; 0x22
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	69 f7       	brne	.-38     	; 0x2ede <monitor_LDR_DCMotor+0x204>
    2f04:	14 c0       	rjmp	.+40     	; 0x2f2e <monitor_LDR_DCMotor+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9a a3       	std	Y+34, r25	; 0x22
    2f18:	89 a3       	std	Y+33, r24	; 0x21
    2f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f20:	8d 8f       	std	Y+29, r24	; 0x1d
    2f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <monitor_LDR_DCMotor+0x24c>
    2f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2c:	8d 8f       	std	Y+29, r24	; 0x1d
        //--y;
        //if(y==0) break;

        //DC motor

        if(DIO_GetPinValue(DIO_PORTD, DIO_PIN3) == PIN_LOW){
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	63 e0       	ldi	r22, 0x03	; 3
    2f32:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <DIO_GetPinValue>
    2f36:	88 23       	and	r24, r24
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <monitor_LDR_DCMotor+0x262>
    2f3a:	78 c0       	rjmp	.+240    	; 0x302c <monitor_LDR_DCMotor+0x352>

        	DIO_SetPinValue(DIO_PORTD, DIO_PIN2,PIN_HIGH);
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	62 e0       	ldi	r22, 0x02	; 2
    2f40:	41 e0       	ldi	r20, 0x01	; 1
    2f42:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a8 ec       	ldi	r26, 0xC8	; 200
    2f4c:	b2 e4       	ldi	r27, 0x42	; 66
    2f4e:	89 8f       	std	Y+25, r24	; 0x19
    2f50:	9a 8f       	std	Y+26, r25	; 0x1a
    2f52:	ab 8f       	std	Y+27, r26	; 0x1b
    2f54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	69 8d       	ldd	r22, Y+25	; 0x19
    2f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8d 8b       	std	Y+21, r24	; 0x15
    2f70:	9e 8b       	std	Y+22, r25	; 0x16
    2f72:	af 8b       	std	Y+23, r26	; 0x17
    2f74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f76:	6d 89       	ldd	r22, Y+21	; 0x15
    2f78:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <monitor_LDR_DCMotor+0x2be>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9c 8b       	std	Y+20, r25	; 0x14
    2f94:	8b 8b       	std	Y+19, r24	; 0x13
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <monitor_LDR_DCMotor+0x33c>
	else if (__tmp > 65535)
    2f98:	6d 89       	ldd	r22, Y+21	; 0x15
    2f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <monitor_LDR_DCMotor+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9c 8b       	std	Y+20, r25	; 0x14
    2fd6:	8b 8b       	std	Y+19, r24	; 0x13
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <monitor_LDR_DCMotor+0x31e>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9a 8b       	std	Y+18, r25	; 0x12
    2fe0:	89 8b       	std	Y+17, r24	; 0x11
    2fe2:	89 89       	ldd	r24, Y+17	; 0x11
    2fe4:	9a 89       	ldd	r25, Y+18	; 0x12
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <monitor_LDR_DCMotor+0x30c>
    2fea:	9a 8b       	std	Y+18, r25	; 0x12
    2fec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9c 8b       	std	Y+20, r25	; 0x14
    2ff6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <monitor_LDR_DCMotor+0x300>
    3000:	8c c0       	rjmp	.+280    	; 0x311a <monitor_LDR_DCMotor+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6d 89       	ldd	r22, Y+21	; 0x15
    3004:	7e 89       	ldd	r23, Y+22	; 0x16
    3006:	8f 89       	ldd	r24, Y+23	; 0x17
    3008:	98 8d       	ldd	r25, Y+24	; 0x18
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9c 8b       	std	Y+20, r25	; 0x14
    3014:	8b 8b       	std	Y+19, r24	; 0x13
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	9c 89       	ldd	r25, Y+20	; 0x14
    301a:	98 8b       	std	Y+16, r25	; 0x10
    301c:	8f 87       	std	Y+15, r24	; 0x0f
    301e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3020:	98 89       	ldd	r25, Y+16	; 0x10
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <monitor_LDR_DCMotor+0x348>
    3026:	98 8b       	std	Y+16, r25	; 0x10
    3028:	8f 87       	std	Y+15, r24	; 0x0f
    302a:	77 c0       	rjmp	.+238    	; 0x311a <monitor_LDR_DCMotor+0x440>
        	_delay_ms(100);

        }else{
        	DIO_SetPinValue(DIO_PORTD, DIO_PIN2,PIN_LOW);
    302c:	83 e0       	ldi	r24, 0x03	; 3
    302e:	62 e0       	ldi	r22, 0x02	; 2
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a8 ec       	ldi	r26, 0xC8	; 200
    303c:	b2 e4       	ldi	r27, 0x42	; 66
    303e:	8b 87       	std	Y+11, r24	; 0x0b
    3040:	9c 87       	std	Y+12, r25	; 0x0c
    3042:	ad 87       	std	Y+13, r26	; 0x0d
    3044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3046:	6b 85       	ldd	r22, Y+11	; 0x0b
    3048:	7c 85       	ldd	r23, Y+12	; 0x0c
    304a:	8d 85       	ldd	r24, Y+13	; 0x0d
    304c:	9e 85       	ldd	r25, Y+14	; 0x0e
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	4a ef       	ldi	r20, 0xFA	; 250
    3054:	54 e4       	ldi	r21, 0x44	; 68
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	8f 83       	std	Y+7, r24	; 0x07
    3060:	98 87       	std	Y+8, r25	; 0x08
    3062:	a9 87       	std	Y+9, r26	; 0x09
    3064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3066:	6f 81       	ldd	r22, Y+7	; 0x07
    3068:	78 85       	ldd	r23, Y+8	; 0x08
    306a:	89 85       	ldd	r24, Y+9	; 0x09
    306c:	9a 85       	ldd	r25, Y+10	; 0x0a
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e8       	ldi	r20, 0x80	; 128
    3074:	5f e3       	ldi	r21, 0x3F	; 63
    3076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	2c f4       	brge	.+10     	; 0x3088 <monitor_LDR_DCMotor+0x3ae>
		__ticks = 1;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9e 83       	std	Y+6, r25	; 0x06
    3084:	8d 83       	std	Y+5, r24	; 0x05
    3086:	3f c0       	rjmp	.+126    	; 0x3106 <monitor_LDR_DCMotor+0x42c>
	else if (__tmp > 65535)
    3088:	6f 81       	ldd	r22, Y+7	; 0x07
    308a:	78 85       	ldd	r23, Y+8	; 0x08
    308c:	89 85       	ldd	r24, Y+9	; 0x09
    308e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	3f ef       	ldi	r19, 0xFF	; 255
    3094:	4f e7       	ldi	r20, 0x7F	; 127
    3096:	57 e4       	ldi	r21, 0x47	; 71
    3098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309c:	18 16       	cp	r1, r24
    309e:	4c f5       	brge	.+82     	; 0x30f2 <monitor_LDR_DCMotor+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e2       	ldi	r20, 0x20	; 32
    30ae:	51 e4       	ldi	r21, 0x41	; 65
    30b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	0f c0       	rjmp	.+30     	; 0x30e8 <monitor_LDR_DCMotor+0x40e>
    30ca:	88 ec       	ldi	r24, 0xC8	; 200
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	9c 83       	std	Y+4, r25	; 0x04
    30d0:	8b 83       	std	Y+3, r24	; 0x03
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	9c 81       	ldd	r25, Y+4	; 0x04
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <monitor_LDR_DCMotor+0x3fc>
    30da:	9c 83       	std	Y+4, r25	; 0x04
    30dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	69 f7       	brne	.-38     	; 0x30ca <monitor_LDR_DCMotor+0x3f0>
    30f0:	14 c0       	rjmp	.+40     	; 0x311a <monitor_LDR_DCMotor+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	9e 83       	std	Y+6, r25	; 0x06
    3104:	8d 83       	std	Y+5, r24	; 0x05
    3106:	8d 81       	ldd	r24, Y+5	; 0x05
    3108:	9e 81       	ldd	r25, Y+6	; 0x06
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	9a 81       	ldd	r25, Y+2	; 0x02
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <monitor_LDR_DCMotor+0x438>
    3116:	9a 83       	std	Y+2, r25	; 0x02
    3118:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
        }
//    }
}
    311a:	ec 96       	adiw	r28, 0x3c	; 60
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <main>:

void control_servo_motor(void);

//-------------------------------------------

void main(void) {
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	c2 57       	subi	r28, 0x72	; 114
    313a:	d0 40       	sbci	r29, 0x00	; 0
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPin_Direction(DIO_PORTD, DIO_PIN2, PIN_OUTPUT);
    3146:	83 e0       	ldi	r24, 0x03	; 3
    3148:	62 e0       	ldi	r22, 0x02	; 2
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTD, DIO_PIN3, PIN_INPUT);
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	63 e0       	ldi	r22, 0x03	; 3
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
	DIO_SetPinValue(DIO_PORTD, DIO_PIN3,PIN_HIGH);
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	63 e0       	ldi	r22, 0x03	; 3
    315e:	41 e0       	ldi	r20, 0x01	; 1
    3160:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>

    // Initialize Ports
    DIO_SetPort_Direction(DIO_PORTC, PORT_OUTPUT);
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	6f ef       	ldi	r22, 0xFF	; 255
    3168:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_SetPort_Direction>
    DIO_SetPort_Direction(DIO_PORTB, PORT_INPUT);
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_SetPort_Direction>
    DIO_SetPort_Direction(DIO_PORTA, PORT_OUTPUT);
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	6f ef       	ldi	r22, 0xFF	; 255
    3178:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_SetPort_Direction>


    // Initialize Pins
    DIO_SetPin_Direction(DIO_PORTD, DIO_PIN0, PIN_INPUT);
    317c:	83 e0       	ldi	r24, 0x03	; 3
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	40 e0       	ldi	r20, 0x00	; 0
    3182:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
    DIO_SetPin_Direction(DIO_PORTD, DIO_PIN1, PIN_OUTPUT);
    3186:	83 e0       	ldi	r24, 0x03	; 3
    3188:	61 e0       	ldi	r22, 0x01	; 1
    318a:	41 e0       	ldi	r20, 0x01	; 1
    318c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>
    DIO_SetPin_Direction(DIO_PORTD, DIO_PIN5, PIN_OUTPUT);
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	65 e0       	ldi	r22, 0x05	; 5
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 77 0c 	call	0x18ee	; 0x18ee <DIO_SetPin_Direction>

    // Initialize Peripherals
    ADC_voidINIT();
    319a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <ADC_voidINIT>
    CLCD_voidINIT();
    319e:	0e 94 26 13 	call	0x264c	; 0x264c <CLCD_voidINIT>
    KPD_voidINIT();
    31a2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <KPD_voidINIT>
    GIE_voidEnable();
    31a6:	0e 94 bf 09 	call	0x137e	; 0x137e <GIE_voidEnable>
    USART_voidINIT();
    31aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidINIT>
      // Initialize the ADC

    u8 enteredUserID[USER_ID_LENGTH + 1];
    u8 enteredPassword[PASSWORD_LENGTH + 1];
    u8 attempts = 0;
    31ae:	fe 01       	movw	r30, r28
    31b0:	e8 59       	subi	r30, 0x98	; 152
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	10 82       	st	Z, r1
    u8 currentChar;
    u8 i, j;
    u8 isPasswordCorrect = 0;
    31b6:	fe 01       	movw	r30, r28
    31b8:	ec 59       	subi	r30, 0x9C	; 156
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	10 82       	st	Z, r1
    u8 userFound = 0;
    31be:	fe 01       	movw	r30, r28
    31c0:	ed 59       	subi	r30, 0x9D	; 157
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	10 82       	st	Z, r1
//		}
//
//	} while (currentChar == NO_PRESSED_KEY);


	CLCD_Clear();
    31c6:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
    31ca:	ee c4       	rjmp	.+2524   	; 0x3ba8 <main+0xa7c>
	while (attempts < MAX_ATTEMPTS) {
		CLCD_Clear();
    31cc:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
		CLCD_voidSendString("ENTER USER ID:");
    31d0:	80 e6       	ldi	r24, 0x60	; 96
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
		CLCD_voidGOTOXY(1, 0);
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>

		for (i = 0; i < USER_ID_LENGTH; i++) {
    31e0:	fe 01       	movw	r30, r28
    31e2:	ea 59       	subi	r30, 0x9A	; 154
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	10 82       	st	Z, r1
    31e8:	ed c0       	rjmp	.+474    	; 0x33c4 <main+0x298>
			do {
				currentChar = KPD_GetMappedValue(KPD_u8GetPressedKey());
    31ea:	0e 94 85 10 	call	0x210a	; 0x210a <KPD_u8GetPressedKey>
    31ee:	0e 94 44 11 	call	0x2288	; 0x2288 <KPD_GetMappedValue>
    31f2:	fe 01       	movw	r30, r28
    31f4:	e9 59       	subi	r30, 0x99	; 153
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 83       	st	Z, r24

				if (currentChar == NO_PRESSED_KEY) {
    31fa:	fe 01       	movw	r30, r28
    31fc:	e9 59       	subi	r30, 0x99	; 153
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 81       	ld	r24, Z
    3202:	8f 3f       	cpi	r24, 0xFF	; 255
    3204:	31 f4       	brne	.+12     	; 0x3212 <main+0xe6>
					currentChar = USART_u8ReceiveNonBlocking();
    3206:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <USART_u8ReceiveNonBlocking>
    320a:	fe 01       	movw	r30, r28
    320c:	e9 59       	subi	r30, 0x99	; 153
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 83       	st	Z, r24
				}

			} while (currentChar == NO_PRESSED_KEY);
    3212:	fe 01       	movw	r30, r28
    3214:	e9 59       	subi	r30, 0x99	; 153
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 81       	ld	r24, Z
    321a:	8f 3f       	cpi	r24, 0xFF	; 255
    321c:	31 f3       	breq	.-52     	; 0x31ea <main+0xbe>

			enteredUserID[i] = currentChar;
    321e:	fe 01       	movw	r30, r28
    3220:	ea 59       	subi	r30, 0x9A	; 154
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	ce 01       	movw	r24, r28
    322c:	87 59       	subi	r24, 0x97	; 151
    322e:	9f 4f       	sbci	r25, 0xFF	; 255
    3230:	dc 01       	movw	r26, r24
    3232:	a2 0f       	add	r26, r18
    3234:	b3 1f       	adc	r27, r19
    3236:	fe 01       	movw	r30, r28
    3238:	e9 59       	subi	r30, 0x99	; 153
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	80 81       	ld	r24, Z
    323e:	8c 93       	st	X, r24
			CLCD_voidSendData(currentChar);
    3240:	fe 01       	movw	r30, r28
    3242:	e9 59       	subi	r30, 0x99	; 153
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	0e 94 88 12 	call	0x2510	; 0x2510 <CLCD_voidSendData>
    324c:	fe 01       	movw	r30, r28
    324e:	e1 5a       	subi	r30, 0xA1	; 161
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	a6 e9       	ldi	r26, 0x96	; 150
    3258:	b3 e4       	ldi	r27, 0x43	; 67
    325a:	80 83       	st	Z, r24
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	a2 83       	std	Z+2, r26	; 0x02
    3260:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3262:	8e 01       	movw	r16, r28
    3264:	05 5a       	subi	r16, 0xA5	; 165
    3266:	1f 4f       	sbci	r17, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	e1 5a       	subi	r30, 0xA1	; 161
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a ef       	ldi	r20, 0xFA	; 250
    327c:	54 e4       	ldi	r21, 0x44	; 68
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	f8 01       	movw	r30, r16
    3288:	80 83       	st	Z, r24
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3290:	fe 01       	movw	r30, r28
    3292:	e5 5a       	subi	r30, 0xA5	; 165
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	44 f4       	brge	.+16     	; 0x32be <main+0x192>
		__ticks = 1;
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 5a       	subi	r30, 0xA7	; 167
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	64 c0       	rjmp	.+200    	; 0x3386 <main+0x25a>
	else if (__tmp > 65535)
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 5a       	subi	r30, 0xA5	; 165
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	57 e4       	ldi	r21, 0x47	; 71
    32d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	0c f0       	brlt	.+2      	; 0x32de <main+0x1b2>
    32dc:	43 c0       	rjmp	.+134    	; 0x3364 <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	fe 01       	movw	r30, r28
    32e0:	e1 5a       	subi	r30, 0xA1	; 161
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e2       	ldi	r20, 0x20	; 32
    32f2:	51 e4       	ldi	r21, 0x41	; 65
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8e 01       	movw	r16, r28
    32fe:	07 5a       	subi	r16, 0xA7	; 167
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    3314:	1f c0       	rjmp	.+62     	; 0x3354 <main+0x228>
    3316:	fe 01       	movw	r30, r28
    3318:	e9 5a       	subi	r30, 0xA9	; 169
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	88 ec       	ldi	r24, 0xC8	; 200
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	80 83       	st	Z, r24
    3324:	fe 01       	movw	r30, r28
    3326:	e9 5a       	subi	r30, 0xA9	; 169
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	f1 f7       	brne	.-4      	; 0x332e <main+0x202>
    3332:	fe 01       	movw	r30, r28
    3334:	e9 5a       	subi	r30, 0xA9	; 169
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	de 01       	movw	r26, r28
    333e:	a7 5a       	subi	r26, 0xA7	; 167
    3340:	bf 4f       	sbci	r27, 0xFF	; 255
    3342:	fe 01       	movw	r30, r28
    3344:	e7 5a       	subi	r30, 0xA7	; 167
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	9c 93       	st	X, r25
    3352:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3354:	fe 01       	movw	r30, r28
    3356:	e7 5a       	subi	r30, 0xA7	; 167
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	d1 f6       	brne	.-76     	; 0x3316 <main+0x1ea>
    3362:	27 c0       	rjmp	.+78     	; 0x33b2 <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3364:	8e 01       	movw	r16, r28
    3366:	07 5a       	subi	r16, 0xA7	; 167
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	e5 5a       	subi	r30, 0xA5	; 165
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
    3386:	de 01       	movw	r26, r28
    3388:	ab 5a       	subi	r26, 0xAB	; 171
    338a:	bf 4f       	sbci	r27, 0xFF	; 255
    338c:	fe 01       	movw	r30, r28
    338e:	e7 5a       	subi	r30, 0xA7	; 167
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	8d 93       	st	X+, r24
    3398:	9c 93       	st	X, r25
    339a:	fe 01       	movw	r30, r28
    339c:	eb 5a       	subi	r30, 0xAB	; 171
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <main+0x278>
    33a8:	fe 01       	movw	r30, r28
    33aa:	eb 5a       	subi	r30, 0xAB	; 171
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
	while (attempts < MAX_ATTEMPTS) {
		CLCD_Clear();
		CLCD_voidSendString("ENTER USER ID:");
		CLCD_voidGOTOXY(1, 0);

		for (i = 0; i < USER_ID_LENGTH; i++) {
    33b2:	de 01       	movw	r26, r28
    33b4:	aa 59       	subi	r26, 0x9A	; 154
    33b6:	bf 4f       	sbci	r27, 0xFF	; 255
    33b8:	fe 01       	movw	r30, r28
    33ba:	ea 59       	subi	r30, 0x9A	; 154
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 81       	ld	r24, Z
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	8c 93       	st	X, r24
    33c4:	fe 01       	movw	r30, r28
    33c6:	ea 59       	subi	r30, 0x9A	; 154
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 81       	ld	r24, Z
    33cc:	84 30       	cpi	r24, 0x04	; 4
    33ce:	08 f4       	brcc	.+2      	; 0x33d2 <main+0x2a6>
    33d0:	0c cf       	rjmp	.-488    	; 0x31ea <main+0xbe>

			enteredUserID[i] = currentChar;
			CLCD_voidSendData(currentChar);
			_delay_ms(300);
		}
		enteredUserID[USER_ID_LENGTH] = '\0';
    33d2:	fe 01       	movw	r30, r28
    33d4:	e7 59       	subi	r30, 0x97	; 151
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	14 82       	std	Z+4, r1	; 0x04

		for (j = 0; j < NUM_USERS; j++) {
    33da:	fe 01       	movw	r30, r28
    33dc:	eb 59       	subi	r30, 0x9B	; 155
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	10 82       	st	Z, r1
    33e2:	24 c0       	rjmp	.+72     	; 0x342c <main+0x300>
			if (strcmp((const char*)enteredUserID, users[j]) == 0) {
    33e4:	fe 01       	movw	r30, r28
    33e6:	eb 59       	subi	r30, 0x9B	; 155
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	fc 01       	movw	r30, r24
    33f6:	e2 57       	subi	r30, 0x72	; 114
    33f8:	fe 4f       	sbci	r31, 0xFE	; 254
    33fa:	20 81       	ld	r18, Z
    33fc:	31 81       	ldd	r19, Z+1	; 0x01
    33fe:	ce 01       	movw	r24, r28
    3400:	87 59       	subi	r24, 0x97	; 151
    3402:	9f 4f       	sbci	r25, 0xFF	; 255
    3404:	b9 01       	movw	r22, r18
    3406:	0e 94 2a 20 	call	0x4054	; 0x4054 <strcmp>
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	31 f4       	brne	.+12     	; 0x341a <main+0x2ee>
				userFound = 1;
    340e:	fe 01       	movw	r30, r28
    3410:	ed 59       	subi	r30, 0x9D	; 157
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	80 83       	st	Z, r24
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <main+0x30c>
			CLCD_voidSendData(currentChar);
			_delay_ms(300);
		}
		enteredUserID[USER_ID_LENGTH] = '\0';

		for (j = 0; j < NUM_USERS; j++) {
    341a:	de 01       	movw	r26, r28
    341c:	ab 59       	subi	r26, 0x9B	; 155
    341e:	bf 4f       	sbci	r27, 0xFF	; 255
    3420:	fe 01       	movw	r30, r28
    3422:	eb 59       	subi	r30, 0x9B	; 155
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8c 93       	st	X, r24
    342c:	fe 01       	movw	r30, r28
    342e:	eb 59       	subi	r30, 0x9B	; 155
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 81       	ld	r24, Z
    3434:	8a 30       	cpi	r24, 0x0A	; 10
    3436:	b0 f2       	brcs	.-84     	; 0x33e4 <main+0x2b8>
				userFound = 1;
				break;
			}
		}

		if (userFound) {
    3438:	fe 01       	movw	r30, r28
    343a:	ed 59       	subi	r30, 0x9D	; 157
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 81       	ld	r24, Z
    3440:	88 23       	and	r24, r24
    3442:	09 f4       	brne	.+2      	; 0x3446 <main+0x31a>
    3444:	30 c3       	rjmp	.+1632   	; 0x3aa6 <main+0x97a>
			CLCD_Clear();
    3446:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
			CLCD_voidSendString("ENTER PASSWORD:");
    344a:	8f e6       	ldi	r24, 0x6F	; 111
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
			CLCD_voidGOTOXY(1, 0);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>

			for (i = 0; i < PASSWORD_LENGTH; i++) {
    345a:	fe 01       	movw	r30, r28
    345c:	ea 59       	subi	r30, 0x9A	; 154
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	10 82       	st	Z, r1
    3462:	ea c0       	rjmp	.+468    	; 0x3638 <main+0x50c>
				do {
					currentChar = KPD_GetMappedValue(KPD_u8GetPressedKey());
    3464:	0e 94 85 10 	call	0x210a	; 0x210a <KPD_u8GetPressedKey>
    3468:	0e 94 44 11 	call	0x2288	; 0x2288 <KPD_GetMappedValue>
    346c:	fe 01       	movw	r30, r28
    346e:	e9 59       	subi	r30, 0x99	; 153
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	80 83       	st	Z, r24

					if (currentChar == NO_PRESSED_KEY) {
    3474:	fe 01       	movw	r30, r28
    3476:	e9 59       	subi	r30, 0x99	; 153
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	80 81       	ld	r24, Z
    347c:	8f 3f       	cpi	r24, 0xFF	; 255
    347e:	31 f4       	brne	.+12     	; 0x348c <main+0x360>
						currentChar = USART_u8ReceiveNonBlocking();
    3480:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <USART_u8ReceiveNonBlocking>
    3484:	fe 01       	movw	r30, r28
    3486:	e9 59       	subi	r30, 0x99	; 153
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 83       	st	Z, r24
					}

				} while (currentChar == NO_PRESSED_KEY);
    348c:	fe 01       	movw	r30, r28
    348e:	e9 59       	subi	r30, 0x99	; 153
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	8f 3f       	cpi	r24, 0xFF	; 255
    3496:	31 f3       	breq	.-52     	; 0x3464 <main+0x338>

				enteredPassword[i] = currentChar;
    3498:	fe 01       	movw	r30, r28
    349a:	ea 59       	subi	r30, 0x9A	; 154
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	28 2f       	mov	r18, r24
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	ce 01       	movw	r24, r28
    34a6:	82 59       	subi	r24, 0x92	; 146
    34a8:	9f 4f       	sbci	r25, 0xFF	; 255
    34aa:	dc 01       	movw	r26, r24
    34ac:	a2 0f       	add	r26, r18
    34ae:	b3 1f       	adc	r27, r19
    34b0:	fe 01       	movw	r30, r28
    34b2:	e9 59       	subi	r30, 0x99	; 153
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 81       	ld	r24, Z
    34b8:	8c 93       	st	X, r24
				CLCD_voidSendData('*');
    34ba:	8a e2       	ldi	r24, 0x2A	; 42
    34bc:	0e 94 88 12 	call	0x2510	; 0x2510 <CLCD_voidSendData>
    34c0:	fe 01       	movw	r30, r28
    34c2:	ef 5a       	subi	r30, 0xAF	; 175
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	a6 e9       	ldi	r26, 0x96	; 150
    34cc:	b3 e4       	ldi	r27, 0x43	; 67
    34ce:	80 83       	st	Z, r24
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	a2 83       	std	Z+2, r26	; 0x02
    34d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d6:	8e 01       	movw	r16, r28
    34d8:	03 5b       	subi	r16, 0xB3	; 179
    34da:	1f 4f       	sbci	r17, 0xFF	; 255
    34dc:	fe 01       	movw	r30, r28
    34de:	ef 5a       	subi	r30, 0xAF	; 175
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	93 81       	ldd	r25, Z+3	; 0x03
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	4a ef       	ldi	r20, 0xFA	; 250
    34f0:	54 e4       	ldi	r21, 0x44	; 68
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	f8 01       	movw	r30, r16
    34fc:	80 83       	st	Z, r24
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	a2 83       	std	Z+2, r26	; 0x02
    3502:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3504:	fe 01       	movw	r30, r28
    3506:	e3 5b       	subi	r30, 0xB3	; 179
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e8       	ldi	r20, 0x80	; 128
    3518:	5f e3       	ldi	r21, 0x3F	; 63
    351a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351e:	88 23       	and	r24, r24
    3520:	44 f4       	brge	.+16     	; 0x3532 <main+0x406>
		__ticks = 1;
    3522:	fe 01       	movw	r30, r28
    3524:	e5 5b       	subi	r30, 0xB5	; 181
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	80 83       	st	Z, r24
    3530:	64 c0       	rjmp	.+200    	; 0x35fa <main+0x4ce>
	else if (__tmp > 65535)
    3532:	fe 01       	movw	r30, r28
    3534:	e3 5b       	subi	r30, 0xB3	; 179
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	3f ef       	ldi	r19, 0xFF	; 255
    3544:	4f e7       	ldi	r20, 0x7F	; 127
    3546:	57 e4       	ldi	r21, 0x47	; 71
    3548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    354c:	18 16       	cp	r1, r24
    354e:	0c f0       	brlt	.+2      	; 0x3552 <main+0x426>
    3550:	43 c0       	rjmp	.+134    	; 0x35d8 <main+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3552:	fe 01       	movw	r30, r28
    3554:	ef 5a       	subi	r30, 0xAF	; 175
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e2       	ldi	r20, 0x20	; 32
    3566:	51 e4       	ldi	r21, 0x41	; 65
    3568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	8e 01       	movw	r16, r28
    3572:	05 5b       	subi	r16, 0xB5	; 181
    3574:	1f 4f       	sbci	r17, 0xFF	; 255
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	f8 01       	movw	r30, r16
    3584:	91 83       	std	Z+1, r25	; 0x01
    3586:	80 83       	st	Z, r24
    3588:	1f c0       	rjmp	.+62     	; 0x35c8 <main+0x49c>
    358a:	fe 01       	movw	r30, r28
    358c:	e7 5b       	subi	r30, 0xB7	; 183
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	88 ec       	ldi	r24, 0xC8	; 200
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
    3598:	fe 01       	movw	r30, r28
    359a:	e7 5b       	subi	r30, 0xB7	; 183
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <main+0x476>
    35a6:	fe 01       	movw	r30, r28
    35a8:	e7 5b       	subi	r30, 0xB7	; 183
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b0:	de 01       	movw	r26, r28
    35b2:	a5 5b       	subi	r26, 0xB5	; 181
    35b4:	bf 4f       	sbci	r27, 0xFF	; 255
    35b6:	fe 01       	movw	r30, r28
    35b8:	e5 5b       	subi	r30, 0xB5	; 181
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 81       	ld	r24, Z
    35be:	91 81       	ldd	r25, Z+1	; 0x01
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	11 96       	adiw	r26, 0x01	; 1
    35c4:	9c 93       	st	X, r25
    35c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	fe 01       	movw	r30, r28
    35ca:	e5 5b       	subi	r30, 0xB5	; 181
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	d1 f6       	brne	.-76     	; 0x358a <main+0x45e>
    35d6:	27 c0       	rjmp	.+78     	; 0x3626 <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d8:	8e 01       	movw	r16, r28
    35da:	05 5b       	subi	r16, 0xB5	; 181
    35dc:	1f 4f       	sbci	r17, 0xFF	; 255
    35de:	fe 01       	movw	r30, r28
    35e0:	e3 5b       	subi	r30, 0xB3	; 179
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	60 81       	ld	r22, Z
    35e6:	71 81       	ldd	r23, Z+1	; 0x01
    35e8:	82 81       	ldd	r24, Z+2	; 0x02
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	f8 01       	movw	r30, r16
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
    35fa:	de 01       	movw	r26, r28
    35fc:	a9 5b       	subi	r26, 0xB9	; 185
    35fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3600:	fe 01       	movw	r30, r28
    3602:	e5 5b       	subi	r30, 0xB5	; 181
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	8d 93       	st	X+, r24
    360c:	9c 93       	st	X, r25
    360e:	fe 01       	movw	r30, r28
    3610:	e9 5b       	subi	r30, 0xB9	; 185
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <main+0x4ec>
    361c:	fe 01       	movw	r30, r28
    361e:	e9 5b       	subi	r30, 0xB9	; 185
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
		if (userFound) {
			CLCD_Clear();
			CLCD_voidSendString("ENTER PASSWORD:");
			CLCD_voidGOTOXY(1, 0);

			for (i = 0; i < PASSWORD_LENGTH; i++) {
    3626:	de 01       	movw	r26, r28
    3628:	aa 59       	subi	r26, 0x9A	; 154
    362a:	bf 4f       	sbci	r27, 0xFF	; 255
    362c:	fe 01       	movw	r30, r28
    362e:	ea 59       	subi	r30, 0x9A	; 154
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	8f 5f       	subi	r24, 0xFF	; 255
    3636:	8c 93       	st	X, r24
    3638:	fe 01       	movw	r30, r28
    363a:	ea 59       	subi	r30, 0x9A	; 154
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	84 30       	cpi	r24, 0x04	; 4
    3642:	08 f4       	brcc	.+2      	; 0x3646 <main+0x51a>
    3644:	0f cf       	rjmp	.-482    	; 0x3464 <main+0x338>

				enteredPassword[i] = currentChar;
				CLCD_voidSendData('*');
				_delay_ms(300);
			}
			enteredPassword[PASSWORD_LENGTH] = '\0';
    3646:	fe 01       	movw	r30, r28
    3648:	e2 59       	subi	r30, 0x92	; 146
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	14 82       	std	Z+4, r1	; 0x04

			if (strcmp((const char*)enteredPassword, passwords[j]) == 0) {
    364e:	fe 01       	movw	r30, r28
    3650:	eb 59       	subi	r30, 0x9B	; 155
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 81       	ld	r24, Z
    3656:	88 2f       	mov	r24, r24
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	fc 01       	movw	r30, r24
    3660:	ee 55       	subi	r30, 0x5E	; 94
    3662:	fe 4f       	sbci	r31, 0xFE	; 254
    3664:	20 81       	ld	r18, Z
    3666:	31 81       	ldd	r19, Z+1	; 0x01
    3668:	ce 01       	movw	r24, r28
    366a:	82 59       	subi	r24, 0x92	; 146
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	b9 01       	movw	r22, r18
    3670:	0e 94 2a 20 	call	0x4054	; 0x4054 <strcmp>
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	09 f0       	breq	.+2      	; 0x367a <main+0x54e>
    3678:	9d c1       	rjmp	.+826    	; 0x39b4 <main+0x888>
				CLCD_Clear();
    367a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
				CLCD_voidSendString("ACCESS GRANTED");
    367e:	8f e7       	ldi	r24, 0x7F	; 127
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
				isPasswordCorrect = 1;
    3686:	fe 01       	movw	r30, r28
    3688:	ec 59       	subi	r30, 0x9C	; 156
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	80 83       	st	Z, r24
    3690:	fe 01       	movw	r30, r28
    3692:	ed 5b       	subi	r30, 0xBD	; 189
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	aa e7       	ldi	r26, 0x7A	; 122
    369c:	b4 e4       	ldi	r27, 0x44	; 68
    369e:	80 83       	st	Z, r24
    36a0:	91 83       	std	Z+1, r25	; 0x01
    36a2:	a2 83       	std	Z+2, r26	; 0x02
    36a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a6:	8e 01       	movw	r16, r28
    36a8:	01 5c       	subi	r16, 0xC1	; 193
    36aa:	1f 4f       	sbci	r17, 0xFF	; 255
    36ac:	fe 01       	movw	r30, r28
    36ae:	ed 5b       	subi	r30, 0xBD	; 189
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	60 81       	ld	r22, Z
    36b4:	71 81       	ldd	r23, Z+1	; 0x01
    36b6:	82 81       	ldd	r24, Z+2	; 0x02
    36b8:	93 81       	ldd	r25, Z+3	; 0x03
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	4a ef       	ldi	r20, 0xFA	; 250
    36c0:	54 e4       	ldi	r21, 0x44	; 68
    36c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	f8 01       	movw	r30, r16
    36cc:	80 83       	st	Z, r24
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	a2 83       	std	Z+2, r26	; 0x02
    36d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36d4:	fe 01       	movw	r30, r28
    36d6:	ff 96       	adiw	r30, 0x3f	; 63
    36d8:	60 81       	ld	r22, Z
    36da:	71 81       	ldd	r23, Z+1	; 0x01
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	93 81       	ldd	r25, Z+3	; 0x03
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	2c f4       	brge	.+10     	; 0x36fa <main+0x5ce>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9e af       	std	Y+62, r25	; 0x3e
    36f6:	8d af       	std	Y+61, r24	; 0x3d
    36f8:	46 c0       	rjmp	.+140    	; 0x3786 <main+0x65a>
	else if (__tmp > 65535)
    36fa:	fe 01       	movw	r30, r28
    36fc:	ff 96       	adiw	r30, 0x3f	; 63
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	3f ef       	ldi	r19, 0xFF	; 255
    370a:	4f e7       	ldi	r20, 0x7F	; 127
    370c:	57 e4       	ldi	r21, 0x47	; 71
    370e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3712:	18 16       	cp	r1, r24
    3714:	64 f5       	brge	.+88     	; 0x376e <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3716:	fe 01       	movw	r30, r28
    3718:	ed 5b       	subi	r30, 0xBD	; 189
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 81       	ld	r22, Z
    371e:	71 81       	ldd	r23, Z+1	; 0x01
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	93 81       	ldd	r25, Z+3	; 0x03
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e2       	ldi	r20, 0x20	; 32
    372a:	51 e4       	ldi	r21, 0x41	; 65
    372c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	bc 01       	movw	r22, r24
    3736:	cd 01       	movw	r24, r26
    3738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9e af       	std	Y+62, r25	; 0x3e
    3742:	8d af       	std	Y+61, r24	; 0x3d
    3744:	0f c0       	rjmp	.+30     	; 0x3764 <main+0x638>
    3746:	88 ec       	ldi	r24, 0xC8	; 200
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	9c af       	std	Y+60, r25	; 0x3c
    374c:	8b af       	std	Y+59, r24	; 0x3b
    374e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3750:	9c ad       	ldd	r25, Y+60	; 0x3c
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	f1 f7       	brne	.-4      	; 0x3752 <main+0x626>
    3756:	9c af       	std	Y+60, r25	; 0x3c
    3758:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375a:	8d ad       	ldd	r24, Y+61	; 0x3d
    375c:	9e ad       	ldd	r25, Y+62	; 0x3e
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	9e af       	std	Y+62, r25	; 0x3e
    3762:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3764:	8d ad       	ldd	r24, Y+61	; 0x3d
    3766:	9e ad       	ldd	r25, Y+62	; 0x3e
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	69 f7       	brne	.-38     	; 0x3746 <main+0x61a>
    376c:	16 c0       	rjmp	.+44     	; 0x379a <main+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376e:	fe 01       	movw	r30, r28
    3770:	ff 96       	adiw	r30, 0x3f	; 63
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	9e af       	std	Y+62, r25	; 0x3e
    3784:	8d af       	std	Y+61, r24	; 0x3d
    3786:	8d ad       	ldd	r24, Y+61	; 0x3d
    3788:	9e ad       	ldd	r25, Y+62	; 0x3e
    378a:	9a af       	std	Y+58, r25	; 0x3a
    378c:	89 af       	std	Y+57, r24	; 0x39
    378e:	89 ad       	ldd	r24, Y+57	; 0x39
    3790:	9a ad       	ldd	r25, Y+58	; 0x3a
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	f1 f7       	brne	.-4      	; 0x3792 <main+0x666>
    3796:	9a af       	std	Y+58, r25	; 0x3a
    3798:	89 af       	std	Y+57, r24	; 0x39

				_delay_ms(1000);
				// Ask if the user wants to open the door
				CLCD_Clear();
    379a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
				CLCD_voidSendString("1: OPEN DOOR");
    379e:	8e e8       	ldi	r24, 0x8E	; 142
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
				CLCD_voidGOTOXY(1, 0);
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>
				CLCD_voidSendString("2: CANCEL");
    37ae:	8b e9       	ldi	r24, 0x9B	; 155
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>

				while (1) {
					currentChar = KPD_GetMappedValue(KPD_u8GetPressedKey());
    37b6:	0e 94 85 10 	call	0x210a	; 0x210a <KPD_u8GetPressedKey>
    37ba:	0e 94 44 11 	call	0x2288	; 0x2288 <KPD_GetMappedValue>
    37be:	fe 01       	movw	r30, r28
    37c0:	e9 59       	subi	r30, 0x99	; 153
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 83       	st	Z, r24

					if (currentChar == NO_PRESSED_KEY) {
    37c6:	fe 01       	movw	r30, r28
    37c8:	e9 59       	subi	r30, 0x99	; 153
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	8f 3f       	cpi	r24, 0xFF	; 255
    37d0:	31 f4       	brne	.+12     	; 0x37de <main+0x6b2>
						currentChar = USART_u8ReceiveNonBlocking();
    37d2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <USART_u8ReceiveNonBlocking>
    37d6:	fe 01       	movw	r30, r28
    37d8:	e9 59       	subi	r30, 0x99	; 153
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	80 83       	st	Z, r24
					}

					if (currentChar == '1') {
    37de:	fe 01       	movw	r30, r28
    37e0:	e9 59       	subi	r30, 0x99	; 153
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	81 33       	cpi	r24, 0x31	; 49
    37e8:	09 f0       	breq	.+2      	; 0x37ec <main+0x6c0>
    37ea:	d6 c0       	rjmp	.+428    	; 0x3998 <main+0x86c>
						CLCD_Clear();
    37ec:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
						CLCD_voidSendString("DOOR is OPEN");
    37f0:	85 ea       	ldi	r24, 0xA5	; 165
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>

						// Call the servo motor function to open the door
						control_servo_motor();
    37f8:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <control_servo_motor>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	aa ef       	ldi	r26, 0xFA	; 250
    3802:	b3 e4       	ldi	r27, 0x43	; 67
    3804:	8d ab       	std	Y+53, r24	; 0x35
    3806:	9e ab       	std	Y+54, r25	; 0x36
    3808:	af ab       	std	Y+55, r26	; 0x37
    380a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380c:	6d a9       	ldd	r22, Y+53	; 0x35
    380e:	7e a9       	ldd	r23, Y+54	; 0x36
    3810:	8f a9       	ldd	r24, Y+55	; 0x37
    3812:	98 ad       	ldd	r25, Y+56	; 0x38
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	4a ef       	ldi	r20, 0xFA	; 250
    381a:	54 e4       	ldi	r21, 0x44	; 68
    381c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	89 ab       	std	Y+49, r24	; 0x31
    3826:	9a ab       	std	Y+50, r25	; 0x32
    3828:	ab ab       	std	Y+51, r26	; 0x33
    382a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    382c:	69 a9       	ldd	r22, Y+49	; 0x31
    382e:	7a a9       	ldd	r23, Y+50	; 0x32
    3830:	8b a9       	ldd	r24, Y+51	; 0x33
    3832:	9c a9       	ldd	r25, Y+52	; 0x34
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e8       	ldi	r20, 0x80	; 128
    383a:	5f e3       	ldi	r21, 0x3F	; 63
    383c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3840:	88 23       	and	r24, r24
    3842:	2c f4       	brge	.+10     	; 0x384e <main+0x722>
		__ticks = 1;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	98 ab       	std	Y+48, r25	; 0x30
    384a:	8f a7       	std	Y+47, r24	; 0x2f
    384c:	3f c0       	rjmp	.+126    	; 0x38cc <main+0x7a0>
	else if (__tmp > 65535)
    384e:	69 a9       	ldd	r22, Y+49	; 0x31
    3850:	7a a9       	ldd	r23, Y+50	; 0x32
    3852:	8b a9       	ldd	r24, Y+51	; 0x33
    3854:	9c a9       	ldd	r25, Y+52	; 0x34
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	3f ef       	ldi	r19, 0xFF	; 255
    385a:	4f e7       	ldi	r20, 0x7F	; 127
    385c:	57 e4       	ldi	r21, 0x47	; 71
    385e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3862:	18 16       	cp	r1, r24
    3864:	4c f5       	brge	.+82     	; 0x38b8 <main+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3866:	6d a9       	ldd	r22, Y+53	; 0x35
    3868:	7e a9       	ldd	r23, Y+54	; 0x36
    386a:	8f a9       	ldd	r24, Y+55	; 0x37
    386c:	98 ad       	ldd	r25, Y+56	; 0x38
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e2       	ldi	r20, 0x20	; 32
    3874:	51 e4       	ldi	r21, 0x41	; 65
    3876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	98 ab       	std	Y+48, r25	; 0x30
    388c:	8f a7       	std	Y+47, r24	; 0x2f
    388e:	0f c0       	rjmp	.+30     	; 0x38ae <main+0x782>
    3890:	88 ec       	ldi	r24, 0xC8	; 200
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	9e a7       	std	Y+46, r25	; 0x2e
    3896:	8d a7       	std	Y+45, r24	; 0x2d
    3898:	8d a5       	ldd	r24, Y+45	; 0x2d
    389a:	9e a5       	ldd	r25, Y+46	; 0x2e
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	f1 f7       	brne	.-4      	; 0x389c <main+0x770>
    38a0:	9e a7       	std	Y+46, r25	; 0x2e
    38a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a6:	98 a9       	ldd	r25, Y+48	; 0x30
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	98 ab       	std	Y+48, r25	; 0x30
    38ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b0:	98 a9       	ldd	r25, Y+48	; 0x30
    38b2:	00 97       	sbiw	r24, 0x00	; 0
    38b4:	69 f7       	brne	.-38     	; 0x3890 <main+0x764>
    38b6:	14 c0       	rjmp	.+40     	; 0x38e0 <main+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b8:	69 a9       	ldd	r22, Y+49	; 0x31
    38ba:	7a a9       	ldd	r23, Y+50	; 0x32
    38bc:	8b a9       	ldd	r24, Y+51	; 0x33
    38be:	9c a9       	ldd	r25, Y+52	; 0x34
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	98 ab       	std	Y+48, r25	; 0x30
    38ca:	8f a7       	std	Y+47, r24	; 0x2f
    38cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ce:	98 a9       	ldd	r25, Y+48	; 0x30
    38d0:	9c a7       	std	Y+44, r25	; 0x2c
    38d2:	8b a7       	std	Y+43, r24	; 0x2b
    38d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    38d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <main+0x7ac>
    38dc:	9c a7       	std	Y+44, r25	; 0x2c
    38de:	8b a7       	std	Y+43, r24	; 0x2b

						_delay_ms(500);
						// Ask if the user wants to turn the LED on
						CLCD_Clear();
    38e0:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
						CLCD_voidSendString("1-LEDon_2-LEDoff");
    38e4:	82 eb       	ldi	r24, 0xB2	; 178
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
						CLCD_voidGOTOXY(1, 0);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	60 e0       	ldi	r22, 0x00	; 0
    38f0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>
						CLCD_voidSendString("USE LDR AND FAN");
    38f4:	83 ec       	ldi	r24, 0xC3	; 195
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>


						while (1) {

							monitor_LDR_DCMotor();
    38fc:	0e 94 6d 16 	call	0x2cda	; 0x2cda <monitor_LDR_DCMotor>


							currentChar = KPD_GetMappedValue(KPD_u8GetPressedKey());
    3900:	0e 94 85 10 	call	0x210a	; 0x210a <KPD_u8GetPressedKey>
    3904:	0e 94 44 11 	call	0x2288	; 0x2288 <KPD_GetMappedValue>
    3908:	fe 01       	movw	r30, r28
    390a:	e9 59       	subi	r30, 0x99	; 153
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	80 83       	st	Z, r24

							if (currentChar == NO_PRESSED_KEY) {
    3910:	fe 01       	movw	r30, r28
    3912:	e9 59       	subi	r30, 0x99	; 153
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	8f 3f       	cpi	r24, 0xFF	; 255
    391a:	31 f4       	brne	.+12     	; 0x3928 <main+0x7fc>
								currentChar = USART_u8ReceiveNonBlocking();
    391c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <USART_u8ReceiveNonBlocking>
    3920:	fe 01       	movw	r30, r28
    3922:	e9 59       	subi	r30, 0x99	; 153
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 83       	st	Z, r24
							}

							if (currentChar == '1') {
    3928:	fe 01       	movw	r30, r28
    392a:	e9 59       	subi	r30, 0x99	; 153
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 81       	ld	r24, Z
    3930:	81 33       	cpi	r24, 0x31	; 49
    3932:	b1 f4       	brne	.+44     	; 0x3960 <main+0x834>

								DIO_SetPinValue(DIO_PORTA, LED_PIN, PIN_HIGH);  // Turn LED ON
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	64 e0       	ldi	r22, 0x04	; 4
    3938:	41 e0       	ldi	r20, 0x01	; 1
    393a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
								CLCD_voidGOTOXY(0,0);
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>
								CLCD_voidSendString("                ");
    3946:	83 ed       	ldi	r24, 0xD3	; 211
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
								CLCD_voidGOTOXY(0,0);
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>
								CLCD_voidSendString("LED is ON");
    3956:	84 ee       	ldi	r24, 0xE4	; 228
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
    395e:	ce cf       	rjmp	.-100    	; 0x38fc <main+0x7d0>

								// Start monitoring LDR for ambient light changes

								//break;
							} else if (currentChar == '2') {
    3960:	fe 01       	movw	r30, r28
    3962:	e9 59       	subi	r30, 0x99	; 153
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	82 33       	cpi	r24, 0x32	; 50
    396a:	41 f6       	brne	.-112    	; 0x38fc <main+0x7d0>
								DIO_SetPinValue(DIO_PORTA, LED_PIN, PIN_LOW);
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	64 e0       	ldi	r22, 0x04	; 4
    3970:	40 e0       	ldi	r20, 0x00	; 0
    3972:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
								CLCD_voidGOTOXY(0,0);
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>
								CLCD_voidSendString("                ");
    397e:	83 ed       	ldi	r24, 0xD3	; 211
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
								CLCD_voidGOTOXY(0,0);
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <CLCD_voidGOTOXY>
//								CLCD_Clear();
								CLCD_voidSendString("LED is OFF");
    398e:	8e ee       	ldi	r24, 0xEE	; 238
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
    3996:	b2 cf       	rjmp	.-156    	; 0x38fc <main+0x7d0>
								//break;
							}
						}
						break;
					} else if (currentChar == '2') {
    3998:	fe 01       	movw	r30, r28
    399a:	e9 59       	subi	r30, 0x99	; 153
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	80 81       	ld	r24, Z
    39a0:	82 33       	cpi	r24, 0x32	; 50
    39a2:	09 f0       	breq	.+2      	; 0x39a6 <main+0x87a>
    39a4:	08 cf       	rjmp	.-496    	; 0x37b6 <main+0x68a>
						CLCD_Clear();
    39a6:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
						CLCD_voidSendString("OPERATION CANCELLED");
    39aa:	89 ef       	ldi	r24, 0xF9	; 249
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
    39b2:	01 c1       	rjmp	.+514    	; 0x3bb6 <main+0xa8a>
						break;
					}
				}
				break;
			} else {
				CLCD_Clear();
    39b4:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
				CLCD_voidSendString("INCORRECT");
    39b8:	8d e0       	ldi	r24, 0x0D	; 13
    39ba:	91 e0       	ldi	r25, 0x01	; 1
    39bc:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	aa ef       	ldi	r26, 0xFA	; 250
    39c6:	b4 e4       	ldi	r27, 0x44	; 68
    39c8:	8f a3       	std	Y+39, r24	; 0x27
    39ca:	98 a7       	std	Y+40, r25	; 0x28
    39cc:	a9 a7       	std	Y+41, r26	; 0x29
    39ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d0:	6f a1       	ldd	r22, Y+39	; 0x27
    39d2:	78 a5       	ldd	r23, Y+40	; 0x28
    39d4:	89 a5       	ldd	r24, Y+41	; 0x29
    39d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a ef       	ldi	r20, 0xFA	; 250
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8b a3       	std	Y+35, r24	; 0x23
    39ea:	9c a3       	std	Y+36, r25	; 0x24
    39ec:	ad a3       	std	Y+37, r26	; 0x25
    39ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39f0:	6b a1       	ldd	r22, Y+35	; 0x23
    39f2:	7c a1       	ldd	r23, Y+36	; 0x24
    39f4:	8d a1       	ldd	r24, Y+37	; 0x25
    39f6:	9e a1       	ldd	r25, Y+38	; 0x26
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e8       	ldi	r20, 0x80	; 128
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a04:	88 23       	and	r24, r24
    3a06:	2c f4       	brge	.+10     	; 0x3a12 <main+0x8e6>
		__ticks = 1;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9a a3       	std	Y+34, r25	; 0x22
    3a0e:	89 a3       	std	Y+33, r24	; 0x21
    3a10:	3f c0       	rjmp	.+126    	; 0x3a90 <main+0x964>
	else if (__tmp > 65535)
    3a12:	6b a1       	ldd	r22, Y+35	; 0x23
    3a14:	7c a1       	ldd	r23, Y+36	; 0x24
    3a16:	8d a1       	ldd	r24, Y+37	; 0x25
    3a18:	9e a1       	ldd	r25, Y+38	; 0x26
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	3f ef       	ldi	r19, 0xFF	; 255
    3a1e:	4f e7       	ldi	r20, 0x7F	; 127
    3a20:	57 e4       	ldi	r21, 0x47	; 71
    3a22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a26:	18 16       	cp	r1, r24
    3a28:	4c f5       	brge	.+82     	; 0x3a7c <main+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a2c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9a a3       	std	Y+34, r25	; 0x22
    3a50:	89 a3       	std	Y+33, r24	; 0x21
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <main+0x946>
    3a54:	88 ec       	ldi	r24, 0xC8	; 200
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	98 a3       	std	Y+32, r25	; 0x20
    3a5a:	8f 8f       	std	Y+31, r24	; 0x1f
    3a5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a5e:	98 a1       	ldd	r25, Y+32	; 0x20
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <main+0x934>
    3a64:	98 a3       	std	Y+32, r25	; 0x20
    3a66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	89 a1       	ldd	r24, Y+33	; 0x21
    3a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	9a a3       	std	Y+34, r25	; 0x22
    3a70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	89 a1       	ldd	r24, Y+33	; 0x21
    3a74:	9a a1       	ldd	r25, Y+34	; 0x22
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <main+0x928>
    3a7a:	8d c0       	rjmp	.+282    	; 0x3b96 <main+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a80:	8d a1       	ldd	r24, Y+37	; 0x25
    3a82:	9e a1       	ldd	r25, Y+38	; 0x26
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	9a a3       	std	Y+34, r25	; 0x22
    3a8e:	89 a3       	std	Y+33, r24	; 0x21
    3a90:	89 a1       	ldd	r24, Y+33	; 0x21
    3a92:	9a a1       	ldd	r25, Y+34	; 0x22
    3a94:	9e 8f       	std	Y+30, r25	; 0x1e
    3a96:	8d 8f       	std	Y+29, r24	; 0x1d
    3a98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <main+0x970>
    3aa0:	9e 8f       	std	Y+30, r25	; 0x1e
    3aa2:	8d 8f       	std	Y+29, r24	; 0x1d
    3aa4:	78 c0       	rjmp	.+240    	; 0x3b96 <main+0xa6a>
				_delay_ms(2000);
			}
		} else {
			CLCD_Clear();
    3aa6:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
			CLCD_voidSendString("INVALID USER ID");
    3aaa:	87 e1       	ldi	r24, 0x17	; 23
    3aac:	91 e0       	ldi	r25, 0x01	; 1
    3aae:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	aa ef       	ldi	r26, 0xFA	; 250
    3ab8:	b4 e4       	ldi	r27, 0x44	; 68
    3aba:	89 8f       	std	Y+25, r24	; 0x19
    3abc:	9a 8f       	std	Y+26, r25	; 0x1a
    3abe:	ab 8f       	std	Y+27, r26	; 0x1b
    3ac0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	4a ef       	ldi	r20, 0xFA	; 250
    3ad0:	54 e4       	ldi	r21, 0x44	; 68
    3ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	8d 8b       	std	Y+21, r24	; 0x15
    3adc:	9e 8b       	std	Y+22, r25	; 0x16
    3ade:	af 8b       	std	Y+23, r26	; 0x17
    3ae0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e8       	ldi	r20, 0x80	; 128
    3af0:	5f e3       	ldi	r21, 0x3F	; 63
    3af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3af6:	88 23       	and	r24, r24
    3af8:	2c f4       	brge	.+10     	; 0x3b04 <main+0x9d8>
		__ticks = 1;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	9c 8b       	std	Y+20, r25	; 0x14
    3b00:	8b 8b       	std	Y+19, r24	; 0x13
    3b02:	3f c0       	rjmp	.+126    	; 0x3b82 <main+0xa56>
	else if (__tmp > 65535)
    3b04:	6d 89       	ldd	r22, Y+21	; 0x15
    3b06:	7e 89       	ldd	r23, Y+22	; 0x16
    3b08:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	3f ef       	ldi	r19, 0xFF	; 255
    3b10:	4f e7       	ldi	r20, 0x7F	; 127
    3b12:	57 e4       	ldi	r21, 0x47	; 71
    3b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b18:	18 16       	cp	r1, r24
    3b1a:	4c f5       	brge	.+82     	; 0x3b6e <main+0xa42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e2       	ldi	r20, 0x20	; 32
    3b2a:	51 e4       	ldi	r21, 0x41	; 65
    3b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9c 8b       	std	Y+20, r25	; 0x14
    3b42:	8b 8b       	std	Y+19, r24	; 0x13
    3b44:	0f c0       	rjmp	.+30     	; 0x3b64 <main+0xa38>
    3b46:	88 ec       	ldi	r24, 0xC8	; 200
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	9a 8b       	std	Y+18, r25	; 0x12
    3b4c:	89 8b       	std	Y+17, r24	; 0x11
    3b4e:	89 89       	ldd	r24, Y+17	; 0x11
    3b50:	9a 89       	ldd	r25, Y+18	; 0x12
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <main+0xa26>
    3b56:	9a 8b       	std	Y+18, r25	; 0x12
    3b58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	9c 8b       	std	Y+20, r25	; 0x14
    3b62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b64:	8b 89       	ldd	r24, Y+19	; 0x13
    3b66:	9c 89       	ldd	r25, Y+20	; 0x14
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	69 f7       	brne	.-38     	; 0x3b46 <main+0xa1a>
    3b6c:	14 c0       	rjmp	.+40     	; 0x3b96 <main+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b70:	7e 89       	ldd	r23, Y+22	; 0x16
    3b72:	8f 89       	ldd	r24, Y+23	; 0x17
    3b74:	98 8d       	ldd	r25, Y+24	; 0x18
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	9c 8b       	std	Y+20, r25	; 0x14
    3b80:	8b 8b       	std	Y+19, r24	; 0x13
    3b82:	8b 89       	ldd	r24, Y+19	; 0x13
    3b84:	9c 89       	ldd	r25, Y+20	; 0x14
    3b86:	98 8b       	std	Y+16, r25	; 0x10
    3b88:	8f 87       	std	Y+15, r24	; 0x0f
    3b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8c:	98 89       	ldd	r25, Y+16	; 0x10
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <main+0xa62>
    3b92:	98 8b       	std	Y+16, r25	; 0x10
    3b94:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
		}

		attempts++;
    3b96:	de 01       	movw	r26, r28
    3b98:	a8 59       	subi	r26, 0x98	; 152
    3b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e8 59       	subi	r30, 0x98	; 152
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	8f 5f       	subi	r24, 0xFF	; 255
    3ba6:	8c 93       	st	X, r24
//
//	} while (currentChar == NO_PRESSED_KEY);


	CLCD_Clear();
	while (attempts < MAX_ATTEMPTS) {
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e8 59       	subi	r30, 0x98	; 152
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	83 30       	cpi	r24, 0x03	; 3
    3bb2:	08 f4       	brcc	.+2      	; 0x3bb6 <main+0xa8a>
    3bb4:	0b cb       	rjmp	.-2538   	; 0x31cc <main+0xa0>
		}

		attempts++;
	}

	if (!isPasswordCorrect) {
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ec 59       	subi	r30, 0x9C	; 156
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	88 23       	and	r24, r24
    3bc0:	09 f0       	breq	.+2      	; 0x3bc4 <main+0xa98>
    3bc2:	7d c0       	rjmp	.+250    	; 0x3cbe <main+0xb92>
		CLCD_Clear();
    3bc4:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
		CLCD_voidSendString("ALARM TRIGGERED");
    3bc8:	87 e2       	ldi	r24, 0x27	; 39
    3bca:	91 e0       	ldi	r25, 0x01	; 1
    3bcc:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>
		DIO_SetPinValue(DIO_PORTA, DIO_PIN3, PIN_HIGH);
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	63 e0       	ldi	r22, 0x03	; 3
    3bd4:	41 e0       	ldi	r20, 0x01	; 1
    3bd6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e8       	ldi	r25, 0x80	; 128
    3bde:	ab e3       	ldi	r26, 0x3B	; 59
    3be0:	b5 e4       	ldi	r27, 0x45	; 69
    3be2:	8b 87       	std	Y+11, r24	; 0x0b
    3be4:	9c 87       	std	Y+12, r25	; 0x0c
    3be6:	ad 87       	std	Y+13, r26	; 0x0d
    3be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	4a ef       	ldi	r20, 0xFA	; 250
    3bf8:	54 e4       	ldi	r21, 0x44	; 68
    3bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	8f 83       	std	Y+7, r24	; 0x07
    3c04:	98 87       	std	Y+8, r25	; 0x08
    3c06:	a9 87       	std	Y+9, r26	; 0x09
    3c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c0c:	78 85       	ldd	r23, Y+8	; 0x08
    3c0e:	89 85       	ldd	r24, Y+9	; 0x09
    3c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	40 e8       	ldi	r20, 0x80	; 128
    3c18:	5f e3       	ldi	r21, 0x3F	; 63
    3c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c1e:	88 23       	and	r24, r24
    3c20:	2c f4       	brge	.+10     	; 0x3c2c <main+0xb00>
		__ticks = 1;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9e 83       	std	Y+6, r25	; 0x06
    3c28:	8d 83       	std	Y+5, r24	; 0x05
    3c2a:	3f c0       	rjmp	.+126    	; 0x3caa <main+0xb7e>
	else if (__tmp > 65535)
    3c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2e:	78 85       	ldd	r23, Y+8	; 0x08
    3c30:	89 85       	ldd	r24, Y+9	; 0x09
    3c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	3f ef       	ldi	r19, 0xFF	; 255
    3c38:	4f e7       	ldi	r20, 0x7F	; 127
    3c3a:	57 e4       	ldi	r21, 0x47	; 71
    3c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c40:	18 16       	cp	r1, r24
    3c42:	4c f5       	brge	.+82     	; 0x3c96 <main+0xb6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e2       	ldi	r20, 0x20	; 32
    3c52:	51 e4       	ldi	r21, 0x41	; 65
    3c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	bc 01       	movw	r22, r24
    3c5e:	cd 01       	movw	r24, r26
    3c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	9e 83       	std	Y+6, r25	; 0x06
    3c6a:	8d 83       	std	Y+5, r24	; 0x05
    3c6c:	0f c0       	rjmp	.+30     	; 0x3c8c <main+0xb60>
    3c6e:	88 ec       	ldi	r24, 0xC8	; 200
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	9c 83       	std	Y+4, r25	; 0x04
    3c74:	8b 83       	std	Y+3, r24	; 0x03
    3c76:	8b 81       	ldd	r24, Y+3	; 0x03
    3c78:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <main+0xb4e>
    3c7e:	9c 83       	std	Y+4, r25	; 0x04
    3c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c82:	8d 81       	ldd	r24, Y+5	; 0x05
    3c84:	9e 81       	ldd	r25, Y+6	; 0x06
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	9e 83       	std	Y+6, r25	; 0x06
    3c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	69 f7       	brne	.-38     	; 0x3c6e <main+0xb42>
    3c94:	14 c0       	rjmp	.+40     	; 0x3cbe <main+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c96:	6f 81       	ldd	r22, Y+7	; 0x07
    3c98:	78 85       	ldd	r23, Y+8	; 0x08
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	9a 83       	std	Y+2, r25	; 0x02
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb6:	01 97       	sbiw	r24, 0x01	; 1
    3cb8:	f1 f7       	brne	.-4      	; 0x3cb6 <main+0xb8a>
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
	}




	CLCD_Clear();
    3cbe:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <CLCD_Clear>
	CLCD_voidSendString("SEE YOU!");
    3cc2:	87 e3       	ldi	r24, 0x37	; 55
    3cc4:	91 e0       	ldi	r25, 0x01	; 1
    3cc6:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_voidSendString>


}
    3cca:	ce 58       	subi	r28, 0x8E	; 142
    3ccc:	df 4f       	sbci	r29, 0xFF	; 255
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	de bf       	out	0x3e, r29	; 62
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	cd bf       	out	0x3d, r28	; 61
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	08 95       	ret

00003ce2 <control_servo_motor>:
#include "../MCAL/TIMER/TIMER_interface.h"
#include "../MCAL/EXTI/EXTI_interface.h"
#include "../MCAL/TIMER/TIMER1_interface.h"
#include "../MCAL/GIE/GIE_interface.h"
#include <util/delay.h>// Function to control the servo motor
void control_servo_motor(void) {
    3ce2:	df 93       	push	r29
    3ce4:	cf 93       	push	r28
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	6c 97       	sbiw	r28, 0x1c	; 28
    3cec:	0f b6       	in	r0, 0x3f	; 63
    3cee:	f8 94       	cli
    3cf0:	de bf       	out	0x3e, r29	; 62
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	cd bf       	out	0x3d, r28	; 61
    TIM1_voidInit();
    3cf6:	0e 94 10 06 	call	0xc20	; 0xc20 <TIM1_voidInit>
    TIM1_voidEnable(2);
    3cfa:	82 e0       	ldi	r24, 0x02	; 2
    3cfc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <TIM1_voidEnable>
    TIM1_voidSetIcuRegValue(20000);
    3d00:	80 e2       	ldi	r24, 0x20	; 32
    3d02:	9e e4       	ldi	r25, 0x4E	; 78
    3d04:	0e 94 cc 07 	call	0xf98	; 0xf98 <TIM1_voidSetIcuRegValue>

    TIM1_voidSetCmpARegValue(600);
    3d08:	88 e5       	ldi	r24, 0x58	; 88
    3d0a:	92 e0       	ldi	r25, 0x02	; 2
    3d0c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TIM1_voidSetCmpARegValue>
    DIO_SetPinValue(DIO_PORTD, DIO_PIN7, PIN_HIGH);
    3d10:	83 e0       	ldi	r24, 0x03	; 3
    3d12:	67 e0       	ldi	r22, 0x07	; 7
    3d14:	41 e0       	ldi	r20, 0x01	; 1
    3d16:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	aa e7       	ldi	r26, 0x7A	; 122
    3d20:	b4 e4       	ldi	r27, 0x44	; 68
    3d22:	89 8f       	std	Y+25, r24	; 0x19
    3d24:	9a 8f       	std	Y+26, r25	; 0x1a
    3d26:	ab 8f       	std	Y+27, r26	; 0x1b
    3d28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	4a ef       	ldi	r20, 0xFA	; 250
    3d38:	54 e4       	ldi	r21, 0x44	; 68
    3d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	8d 8b       	std	Y+21, r24	; 0x15
    3d44:	9e 8b       	std	Y+22, r25	; 0x16
    3d46:	af 8b       	std	Y+23, r26	; 0x17
    3d48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d50:	98 8d       	ldd	r25, Y+24	; 0x18
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	40 e8       	ldi	r20, 0x80	; 128
    3d58:	5f e3       	ldi	r21, 0x3F	; 63
    3d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d5e:	88 23       	and	r24, r24
    3d60:	2c f4       	brge	.+10     	; 0x3d6c <control_servo_motor+0x8a>
		__ticks = 1;
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	9c 8b       	std	Y+20, r25	; 0x14
    3d68:	8b 8b       	std	Y+19, r24	; 0x13
    3d6a:	3f c0       	rjmp	.+126    	; 0x3dea <control_servo_motor+0x108>
	else if (__tmp > 65535)
    3d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d70:	8f 89       	ldd	r24, Y+23	; 0x17
    3d72:	98 8d       	ldd	r25, Y+24	; 0x18
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	3f ef       	ldi	r19, 0xFF	; 255
    3d78:	4f e7       	ldi	r20, 0x7F	; 127
    3d7a:	57 e4       	ldi	r21, 0x47	; 71
    3d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d80:	18 16       	cp	r1, r24
    3d82:	4c f5       	brge	.+82     	; 0x3dd6 <control_servo_motor+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d84:	69 8d       	ldd	r22, Y+25	; 0x19
    3d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	40 e2       	ldi	r20, 0x20	; 32
    3d92:	51 e4       	ldi	r21, 0x41	; 65
    3d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9c 8b       	std	Y+20, r25	; 0x14
    3daa:	8b 8b       	std	Y+19, r24	; 0x13
    3dac:	0f c0       	rjmp	.+30     	; 0x3dcc <control_servo_motor+0xea>
    3dae:	88 ec       	ldi	r24, 0xC8	; 200
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	9a 8b       	std	Y+18, r25	; 0x12
    3db4:	89 8b       	std	Y+17, r24	; 0x11
    3db6:	89 89       	ldd	r24, Y+17	; 0x11
    3db8:	9a 89       	ldd	r25, Y+18	; 0x12
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <control_servo_motor+0xd8>
    3dbe:	9a 8b       	std	Y+18, r25	; 0x12
    3dc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	9c 8b       	std	Y+20, r25	; 0x14
    3dca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dce:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	69 f7       	brne	.-38     	; 0x3dae <control_servo_motor+0xcc>
    3dd4:	14 c0       	rjmp	.+40     	; 0x3dfe <control_servo_motor+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3dda:	8f 89       	ldd	r24, Y+23	; 0x17
    3ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	9c 8b       	std	Y+20, r25	; 0x14
    3de8:	8b 8b       	std	Y+19, r24	; 0x13
    3dea:	8b 89       	ldd	r24, Y+19	; 0x13
    3dec:	9c 89       	ldd	r25, Y+20	; 0x14
    3dee:	98 8b       	std	Y+16, r25	; 0x10
    3df0:	8f 87       	std	Y+15, r24	; 0x0f
    3df2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df4:	98 89       	ldd	r25, Y+16	; 0x10
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <control_servo_motor+0x114>
    3dfa:	98 8b       	std	Y+16, r25	; 0x10
    3dfc:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    TIM1_voidSetCmpARegValue(1400);
    3dfe:	88 e7       	ldi	r24, 0x78	; 120
    3e00:	95 e0       	ldi	r25, 0x05	; 5
    3e02:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TIM1_voidSetCmpARegValue>
    DIO_SetPinValue(DIO_PORTD, DIO_PIN7, PIN_LOW);
    3e06:	83 e0       	ldi	r24, 0x03	; 3
    3e08:	67 e0       	ldi	r22, 0x07	; 7
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <DIO_SetPinValue>
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	aa e7       	ldi	r26, 0x7A	; 122
    3e16:	b4 e4       	ldi	r27, 0x44	; 68
    3e18:	8b 87       	std	Y+11, r24	; 0x0b
    3e1a:	9c 87       	std	Y+12, r25	; 0x0c
    3e1c:	ad 87       	std	Y+13, r26	; 0x0d
    3e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a ef       	ldi	r20, 0xFA	; 250
    3e2e:	54 e4       	ldi	r21, 0x44	; 68
    3e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8f 83       	std	Y+7, r24	; 0x07
    3e3a:	98 87       	std	Y+8, r25	; 0x08
    3e3c:	a9 87       	std	Y+9, r26	; 0x09
    3e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e40:	6f 81       	ldd	r22, Y+7	; 0x07
    3e42:	78 85       	ldd	r23, Y+8	; 0x08
    3e44:	89 85       	ldd	r24, Y+9	; 0x09
    3e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	2c f4       	brge	.+10     	; 0x3e62 <control_servo_motor+0x180>
		__ticks = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	9e 83       	std	Y+6, r25	; 0x06
    3e5e:	8d 83       	std	Y+5, r24	; 0x05
    3e60:	3f c0       	rjmp	.+126    	; 0x3ee0 <control_servo_motor+0x1fe>
	else if (__tmp > 65535)
    3e62:	6f 81       	ldd	r22, Y+7	; 0x07
    3e64:	78 85       	ldd	r23, Y+8	; 0x08
    3e66:	89 85       	ldd	r24, Y+9	; 0x09
    3e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	4c f5       	brge	.+82     	; 0x3ecc <control_servo_motor+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <control_servo_motor+0x1e0>
    3ea4:	88 ec       	ldi	r24, 0xC8	; 200
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <control_servo_motor+0x1ce>
    3eb4:	9c 83       	std	Y+4, r25	; 0x04
    3eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9e 83       	std	Y+6, r25	; 0x06
    3ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <control_servo_motor+0x1c2>
    3eca:	14 c0       	rjmp	.+40     	; 0x3ef4 <control_servo_motor+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ece:	78 85       	ldd	r23, Y+8	; 0x08
    3ed0:	89 85       	ldd	r24, Y+9	; 0x09
    3ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9e 83       	std	Y+6, r25	; 0x06
    3ede:	8d 83       	std	Y+5, r24	; 0x05
    3ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	9a 81       	ldd	r25, Y+2	; 0x02
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <control_servo_motor+0x20a>
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
}
    3ef4:	6c 96       	adiw	r28, 0x1c	; 28
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <__mulsi3>:
    3f06:	62 9f       	mul	r22, r18
    3f08:	d0 01       	movw	r26, r0
    3f0a:	73 9f       	mul	r23, r19
    3f0c:	f0 01       	movw	r30, r0
    3f0e:	82 9f       	mul	r24, r18
    3f10:	e0 0d       	add	r30, r0
    3f12:	f1 1d       	adc	r31, r1
    3f14:	64 9f       	mul	r22, r20
    3f16:	e0 0d       	add	r30, r0
    3f18:	f1 1d       	adc	r31, r1
    3f1a:	92 9f       	mul	r25, r18
    3f1c:	f0 0d       	add	r31, r0
    3f1e:	83 9f       	mul	r24, r19
    3f20:	f0 0d       	add	r31, r0
    3f22:	74 9f       	mul	r23, r20
    3f24:	f0 0d       	add	r31, r0
    3f26:	65 9f       	mul	r22, r21
    3f28:	f0 0d       	add	r31, r0
    3f2a:	99 27       	eor	r25, r25
    3f2c:	72 9f       	mul	r23, r18
    3f2e:	b0 0d       	add	r27, r0
    3f30:	e1 1d       	adc	r30, r1
    3f32:	f9 1f       	adc	r31, r25
    3f34:	63 9f       	mul	r22, r19
    3f36:	b0 0d       	add	r27, r0
    3f38:	e1 1d       	adc	r30, r1
    3f3a:	f9 1f       	adc	r31, r25
    3f3c:	bd 01       	movw	r22, r26
    3f3e:	cf 01       	movw	r24, r30
    3f40:	11 24       	eor	r1, r1
    3f42:	08 95       	ret

00003f44 <__udivmodhi4>:
    3f44:	aa 1b       	sub	r26, r26
    3f46:	bb 1b       	sub	r27, r27
    3f48:	51 e1       	ldi	r21, 0x11	; 17
    3f4a:	07 c0       	rjmp	.+14     	; 0x3f5a <__udivmodhi4_ep>

00003f4c <__udivmodhi4_loop>:
    3f4c:	aa 1f       	adc	r26, r26
    3f4e:	bb 1f       	adc	r27, r27
    3f50:	a6 17       	cp	r26, r22
    3f52:	b7 07       	cpc	r27, r23
    3f54:	10 f0       	brcs	.+4      	; 0x3f5a <__udivmodhi4_ep>
    3f56:	a6 1b       	sub	r26, r22
    3f58:	b7 0b       	sbc	r27, r23

00003f5a <__udivmodhi4_ep>:
    3f5a:	88 1f       	adc	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	5a 95       	dec	r21
    3f60:	a9 f7       	brne	.-22     	; 0x3f4c <__udivmodhi4_loop>
    3f62:	80 95       	com	r24
    3f64:	90 95       	com	r25
    3f66:	bc 01       	movw	r22, r24
    3f68:	cd 01       	movw	r24, r26
    3f6a:	08 95       	ret

00003f6c <__udivmodsi4>:
    3f6c:	a1 e2       	ldi	r26, 0x21	; 33
    3f6e:	1a 2e       	mov	r1, r26
    3f70:	aa 1b       	sub	r26, r26
    3f72:	bb 1b       	sub	r27, r27
    3f74:	fd 01       	movw	r30, r26
    3f76:	0d c0       	rjmp	.+26     	; 0x3f92 <__udivmodsi4_ep>

00003f78 <__udivmodsi4_loop>:
    3f78:	aa 1f       	adc	r26, r26
    3f7a:	bb 1f       	adc	r27, r27
    3f7c:	ee 1f       	adc	r30, r30
    3f7e:	ff 1f       	adc	r31, r31
    3f80:	a2 17       	cp	r26, r18
    3f82:	b3 07       	cpc	r27, r19
    3f84:	e4 07       	cpc	r30, r20
    3f86:	f5 07       	cpc	r31, r21
    3f88:	20 f0       	brcs	.+8      	; 0x3f92 <__udivmodsi4_ep>
    3f8a:	a2 1b       	sub	r26, r18
    3f8c:	b3 0b       	sbc	r27, r19
    3f8e:	e4 0b       	sbc	r30, r20
    3f90:	f5 0b       	sbc	r31, r21

00003f92 <__udivmodsi4_ep>:
    3f92:	66 1f       	adc	r22, r22
    3f94:	77 1f       	adc	r23, r23
    3f96:	88 1f       	adc	r24, r24
    3f98:	99 1f       	adc	r25, r25
    3f9a:	1a 94       	dec	r1
    3f9c:	69 f7       	brne	.-38     	; 0x3f78 <__udivmodsi4_loop>
    3f9e:	60 95       	com	r22
    3fa0:	70 95       	com	r23
    3fa2:	80 95       	com	r24
    3fa4:	90 95       	com	r25
    3fa6:	9b 01       	movw	r18, r22
    3fa8:	ac 01       	movw	r20, r24
    3faa:	bd 01       	movw	r22, r26
    3fac:	cf 01       	movw	r24, r30
    3fae:	08 95       	ret

00003fb0 <__divmodsi4>:
    3fb0:	97 fb       	bst	r25, 7
    3fb2:	09 2e       	mov	r0, r25
    3fb4:	05 26       	eor	r0, r21
    3fb6:	0e d0       	rcall	.+28     	; 0x3fd4 <__divmodsi4_neg1>
    3fb8:	57 fd       	sbrc	r21, 7
    3fba:	04 d0       	rcall	.+8      	; 0x3fc4 <__divmodsi4_neg2>
    3fbc:	d7 df       	rcall	.-82     	; 0x3f6c <__udivmodsi4>
    3fbe:	0a d0       	rcall	.+20     	; 0x3fd4 <__divmodsi4_neg1>
    3fc0:	00 1c       	adc	r0, r0
    3fc2:	38 f4       	brcc	.+14     	; 0x3fd2 <__divmodsi4_exit>

00003fc4 <__divmodsi4_neg2>:
    3fc4:	50 95       	com	r21
    3fc6:	40 95       	com	r20
    3fc8:	30 95       	com	r19
    3fca:	21 95       	neg	r18
    3fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fce:	4f 4f       	sbci	r20, 0xFF	; 255
    3fd0:	5f 4f       	sbci	r21, 0xFF	; 255

00003fd2 <__divmodsi4_exit>:
    3fd2:	08 95       	ret

00003fd4 <__divmodsi4_neg1>:
    3fd4:	f6 f7       	brtc	.-4      	; 0x3fd2 <__divmodsi4_exit>
    3fd6:	90 95       	com	r25
    3fd8:	80 95       	com	r24
    3fda:	70 95       	com	r23
    3fdc:	61 95       	neg	r22
    3fde:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    3fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe4:	08 95       	ret

00003fe6 <__prologue_saves__>:
    3fe6:	2f 92       	push	r2
    3fe8:	3f 92       	push	r3
    3fea:	4f 92       	push	r4
    3fec:	5f 92       	push	r5
    3fee:	6f 92       	push	r6
    3ff0:	7f 92       	push	r7
    3ff2:	8f 92       	push	r8
    3ff4:	9f 92       	push	r9
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	ca 1b       	sub	r28, r26
    4010:	db 0b       	sbc	r29, r27
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	f8 94       	cli
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	09 94       	ijmp

0000401e <__epilogue_restores__>:
    401e:	2a 88       	ldd	r2, Y+18	; 0x12
    4020:	39 88       	ldd	r3, Y+17	; 0x11
    4022:	48 88       	ldd	r4, Y+16	; 0x10
    4024:	5f 84       	ldd	r5, Y+15	; 0x0f
    4026:	6e 84       	ldd	r6, Y+14	; 0x0e
    4028:	7d 84       	ldd	r7, Y+13	; 0x0d
    402a:	8c 84       	ldd	r8, Y+12	; 0x0c
    402c:	9b 84       	ldd	r9, Y+11	; 0x0b
    402e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4030:	b9 84       	ldd	r11, Y+9	; 0x09
    4032:	c8 84       	ldd	r12, Y+8	; 0x08
    4034:	df 80       	ldd	r13, Y+7	; 0x07
    4036:	ee 80       	ldd	r14, Y+6	; 0x06
    4038:	fd 80       	ldd	r15, Y+5	; 0x05
    403a:	0c 81       	ldd	r16, Y+4	; 0x04
    403c:	1b 81       	ldd	r17, Y+3	; 0x03
    403e:	aa 81       	ldd	r26, Y+2	; 0x02
    4040:	b9 81       	ldd	r27, Y+1	; 0x01
    4042:	ce 0f       	add	r28, r30
    4044:	d1 1d       	adc	r29, r1
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	ed 01       	movw	r28, r26
    4052:	08 95       	ret

00004054 <strcmp>:
    4054:	fb 01       	movw	r30, r22
    4056:	dc 01       	movw	r26, r24
    4058:	8d 91       	ld	r24, X+
    405a:	01 90       	ld	r0, Z+
    405c:	80 19       	sub	r24, r0
    405e:	01 10       	cpse	r0, r1
    4060:	d9 f3       	breq	.-10     	; 0x4058 <strcmp+0x4>
    4062:	99 0b       	sbc	r25, r25
    4064:	08 95       	ret

00004066 <_exit>:
    4066:	f8 94       	cli

00004068 <__stop_program>:
    4068:	ff cf       	rjmp	.-2      	; 0x4068 <__stop_program>
